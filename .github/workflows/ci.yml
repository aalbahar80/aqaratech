name: CI

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      appName:
        required: true
        type: string
      siteTag:
        required: false
        type: string
      backendTag:
        required: false
        type: string
      siteSentryRelease:
        required: false
        type: string
      backendSentryRelease:
        required: false
        type: string

env:
  # Reusable workflows do not inherit secrets from the calling workflow, because the calling workflow does not have an "environment" input.
  # Instead, use organization/repository secrets. Alternatively, you can convert this workflow to a composite action.
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        # only include a package if it it has a tag (i.e. it was published)
        # More info: https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
        # Syntax info: https://docs.github.com/en/actions/learn-github-actions/expressions#example-returning-a-json-object
        shell: bash
        run: |
          if [ -n "${{ inputs.siteTag }}" ]; then
            matrix="{\"include\":[{\"package\":\"site\",\"tag\":\"${{ inputs.siteTag }}\",\"sentryRelease\":\"${{ inputs.siteSentryRelease }}\"}]}"
          fi

          if [ -n "${{ inputs.backendTag }}" ]; then
            matrix="{\"include\":[{\"package\":\"backend\",\"tag\":\"${{ inputs.backendTag }}\",\"sentryRelease\":\"${{ inputs.backendSentryRelease }}\"}]}"
          fi

          if [[ -n "${{ inputs.siteTag }}" && -n "${{ inputs.backendTag }}" ]]; then
            matrix="{\"include\":[{\"package\":\"site\",\"tag\":\"${{ inputs.siteTag }}\",\"sentryRelease\":\"${{ inputs.siteSentryRelease }}\"},{\"package\":\"backend\",\"tag\":\"${{ inputs.backendTag }}\",\"sentryRelease\":\"${{ inputs.backendSentryRelease }}\"}]}"
          fi

          echo $matrix
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  build-package:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: matrix_prep
    strategy:
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    env:
      SENTRY_RELEASE_ENABLE: 1 # invalidates turbo cache (build) to upload sourcemaps
      SENTRY_RELEASE_VERSION: ${{ matrix.sentryRelease || matrix.tag }}
      SENTRY_RELEASE_ENVIRONMENT: ${{ inputs.environment == 'prod' && 'production' || 'staging' }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          # https://github.com/actions/setup-node/blob/main/docs/advanced-usage.md#caching-packages-data
          cache: 'pnpm'

        # BUG: (workaround) Task cli not correctly installed through npm
      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - run: pnpm -F . -F @self/${{ matrix.package }}... install --frozen-lockfile
        env:
          PRISMA_GENERATE_SKIP_AUTOINSTALL: 1 # Also need to remove postinstall script

      - run: pnpm run build -vvv --filter @self/${{ matrix.package }}

      - name: Upload source maps to Sentry
        continue-on-error: true
        if: ${{ matrix.package == 'backend' }} # site sourcemaps are uploaded during the build step
        shell: bash
        # Releases: https://github.com/getsentry/sentry-cli/releases
        run: |
          curl -sL https://sentry.io/get-cli/ | SENTRY_CLI_VERSION="2.18.1" bash
          task -t ./packages/backend/Taskfile.yml sentry:release

      - name: Delete sourcemaps from client bundle
        if: ${{ inputs.environment == 'prod' && matrix.package == 'site' }}
        shell: bash
        run: pnpm zx ./scripts/rm-sourcemaps.mjs ./packages/site/build/client --force

      - run: pnpm --filter @self/${{ matrix.package }} --prod deploy pruned

      - uses: ./.github/actions/build-image
        with:
          package: ${{ matrix.package }}
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          customTag: ${{ matrix.tag }}

  deploy-app:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: build-package
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/deploy
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          projectId: ${{ secrets.DO_PROJECT_ID }}
          appName: ${{ inputs.appName }}
          siteTag: ${{ inputs.siteTag }}
          backendTag: ${{ inputs.backendTag }}

      - name: purge cloudflare cache
        continue-on-error: true
        if: ${{ inputs.environment == 'prod' }}
        shell: bash
        run: ./scripts/purge-cache-cf.sh
        env:
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
          CLOUDFLARE_EMAIL: ${{ secrets.CLOUDFLARE_EMAIL }}
