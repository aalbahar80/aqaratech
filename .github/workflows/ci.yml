name: CI

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      appName:
        required: true
        type: string
      siteTag:
        required: false
        type: string
      backendTag:
        required: false
        type: string
      siteSentryRelease:
        required: false
        type: string
      backendSentryRelease:
        required: false
        type: string

env:
  # Reusable workflows do not inherit secrets from the calling workflow, because the calling workflow does not have an "environment" input.
  # Instead, use organization/repository secrets. Alternatively, you can convert this workflow to a composite action.
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix-site
        if: ${{ inputs.siteTag }}
        # if inputs.siteTag is set, output a matrix with the following value: { "site": { "tag": inputs.siteTag, "sentryRelease": inputs.siteSentryRelease } }
        shell: bash
        run: |
          matrix=$(jq -n --arg tag "${{ inputs.siteTag }}" --arg sentryRelease "${{ inputs.siteSentryRelease }}" '{site: {tag: $tag, sentryRelease: $sentryRelease}}')
          echo $matrix
          echo ::set-output name=matrix::{\"include\":$(echo $matrix)}

      - id: set-matrix-backend
        if: ${{ inputs.backendTag }}
        # if inputs.backendTag is set, output a matrix with the following value: { "backend": { "tag": inputs.backendTag, "sentryRelease": inputs.backendSentryRelease } }
        shell: bash
        run: |
          matrix=$(jq -n --arg tag "${{ inputs.backendTag }}" --arg sentryRelease "${{ inputs.backendSentryRelease }}" '{ "backend": { "tag": $tag, "sentryRelease": $sentryRelease } }')
          echo $matrix
          echo ::set-output name=matrix::$(jq -s add <<< "${{ steps.set-matrix-site.outputs.matrix }}" "$matrix")

  build-package:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: matrix_prep
    strategy:
      matrix:
        ${{fromJson(needs.matrix_prep.outputs.matrix)}}
        # include:
        #   - name: site
        #     tag: ${{ inputs.siteTag }}
        #     sentryRelease: ${{ inputs.siteSentryRelease }}
        #   - name: backend
        #     tag: ${{ inputs.backendTag }}
        #     sentryRelease: ${{ inputs.backendSentryRelease }}

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - uses: pnpm/action-setup@v2
        with:
          version: 7

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          # https://github.com/actions/setup-node/blob/main/docs/advanced-usage.md#caching-packages-data
          cache: 'pnpm'

      - run: pnpm -F . -F @self/${{ matrix.package }}... install --frozen-lockfile
        env:
          PRISMA_GENERATE_SKIP_AUTOINSTALL: 1
          # Also need to remove postinstall script

      - run: pnpm run build:${{ matrix.package }}

      - name: Install sentry-cli
        shell: bash
        run: curl -sL https://sentry.io/get-cli/ | SENTRY_CLI_VERSION="2.7.0" bash

      # TODO: rm prod condition
      - run: pnpm -F @self/${{ matrix.package }} run sentry:release --version ${{ inputs.sentryRelease || inputs.tag }} --environment ${{ inputs.environment }}
        if: ${{ inputs.environment == 'prod' }}

      - if: ${{ inputs.environment == 'prod' && matrix.package == 'site' }}
        name: Delete client sourcemaps
        shell: bash
        run: pnpm zx ./scripts/rm-sourcemaps.mjs ./packages/site/build/client --force

      - run: pnpm --filter @self/${{ matrix.package }} --prod deploy pruned

      - uses: ./.github/actions/build-image
        with:
          package: ${{ matrix.package }}
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          customTag: ${{ matrix.package == 'site' && inputs.siteTag || inputs.backendTag }}

  deploy-app:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: build-package
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/deploy
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          projectId: ${{ secrets.DO_PROJECT_ID }}
          appName: ${{ inputs.appName }}
          siteTag: ${{ inputs.siteTag }}
          backendTag: ${{ inputs.backendTag }}
