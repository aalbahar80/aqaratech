name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

env:
  # Reusable workflows do not inherit secrets from the calling workflow, because the calling workflow does not have an "environment" input.
  # Instead, use organization/repository secrets. Alternatively, you can convert this workflow to a composite action.
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

jobs:
  get-tags:
    runs-on: ubuntu-latest
    outputs:
      siteTag: ${{ steps.step1.outputs.siteTag }}
      backendTag: ${{ steps.step1.outputs.backendTag }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Set tags
        env:
          FORCE_COLOR: 3
          IS_PROD: ${{ inputs.environment == 'prod' }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          npx zx <<'EOF'
          let SITE_TAG;
          let BACKEND_TAG;
          if (process.env.IS_PROD === 'true') {
            SITE_TAG = require('./packages/site/package.json').version;
            BACKEND_TAG = require('./packages/backend/package.json').version;
          } else {
            SITE_TAG = process.env.BRANCH_NAME;
            BACKEND_TAG = process.env.BRANCH_NAME;
          }
          await $`echo "SITE_TAG=${SITE_TAG}" >> $GITHUB_ENV`;
          await $`echo "BACKEND_TAG=${BACKEND_TAG}" >> $GITHUB_ENV`;
          EOF

      - id: step1
        run: |
          echo "::set-output name=siteTag::${{ env.SITE_TAG }}"
          echo "::set-output name=backendTag::${{ env.BACKEND_TAG }}"

  build-site:
    runs-on: ubuntu-latest
    needs: [get-tags]
    environment: ${{ inputs.environment }}
    # needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - uses: pnpm/action-setup@v2
        with:
          version: 7

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          # https://github.com/actions/setup-node/blob/main/docs/advanced-usage.md#caching-packages-data
          cache: "pnpm"

      - run: pnpm -F . -F @self/site... install --frozen-lockfile
      - run: pnpm run build:site

      # START SENTRY ACTION
      # TODO export to action
      # TODO add if prod condition here
      - name: Install sentry-cli
        shell: bash
        run: curl -sL https://sentry.io/get-cli/ | SENTRY_CLI_VERSION="2.5.2" bash

      - run: pnpm -F @self/site run sentry:release --version ${{ needs.get-tags.outputs.siteTag }}

      - if: ${{ inputs.environment == 'prod' }}
        name: Delete client sourcemaps
        shell: bash
        run: pnpm zx ./script/rm-sourcemaps.mjs ./packages/site/build/client --force

      # - run: docker build -f ./packages/site/Dockerfile .
      - uses: ./.github/actions/build
        with:
          package: site
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          customTag: ${{ inputs.environment == 'prod' && needs.get-tags.outputs.siteTag || github.ref_name }}

  build-backend:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [get-tags]
    # needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - uses: pnpm/action-setup@v2
        with:
          version: 7

      - uses: actions/setup-node@v3
        with:
          node-version: 18
          # https://github.com/actions/setup-node/blob/main/docs/advanced-usage.md#caching-packages-data
          cache: "pnpm"

      - run: pnpm -F . -F @self/backend... install --frozen-lockfile
        env:
          PRISMA_GENERATE_SKIP_AUTOINSTALL: 1
          # Also need to remove postinstall script

      - run: pnpm run build:backend

      # START SENTRY ACTION
      # TODO export to action
      - name: Install sentry-cli
        shell: bash
        run: curl -sL https://sentry.io/get-cli/ | SENTRY_CLI_VERSION="2.5.2" bash

      - run: pnpm -F @self/backend run sentry:release --version ${{ needs.get-tags.outputs.backendTag }} ${{ inputs.environment != 'prod' && '--sourcemaps-only' || '' }}

      - run: pnpm --filter @self/backend --prod deploy pruned

      - uses: ./.github/actions/build
        with:
          package: backend
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          customTag: ${{ inputs.environment == 'prod' &&  needs.get-tags.outputs.backendTag  || github.ref_name }}

  deploy-app:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    needs: [build-site, build-backend, get-tags]
    timeout-minutes: 3
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/deploy
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          projectId: ${{ secrets.DO_PROJECT_ID }}
          appName: ${{ github.ref_name }}
          siteTag: ${{ needs.get-tags.outputs.siteTag }}
          backendTag: ${{ needs.get-tags.outputs.backendTag }}
