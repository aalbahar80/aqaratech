diff --git a/build/types/index.d.ts b/build/types/index.d.ts
index 50fdbdce58212c7ec233f88bd0fddcd5bc3377e1..434ab25e8158024e7b394b71056b5297b8d0a37d 100644
--- a/build/types/index.d.ts
+++ b/build/types/index.d.ts
@@ -12,9 +12,34 @@ import * as _tanstack_table_core from '@tanstack/table-core';
 import { RowData, TableOptions } from '@tanstack/table-core';
 export * from '@tanstack/table-core';
 import { Readable } from 'svelte/store';
+import * as svelte_types_runtime_internal_types from 'svelte/types/runtime/internal/types';
+import { ComponentType, ComponentProps } from 'svelte';
+import { noop } from 'svelte/internal';
 
-declare function renderClient(Comp: any, props: any): any;
-declare const renderComponent: typeof renderClient;
+declare function renderClient<T>(Comp: T, props: T extends ComponentType<infer C> ? ComponentProps<C> : any): {
+    new (options: any): {
+        $$: svelte_types_runtime_internal_types.T$$;
+        $$set?: (($$props: any) => void) | undefined;
+        $destroy(): void;
+        $on(type: any, callback: any): typeof noop;
+        $set($$props: any): void;
+    };
+};
+declare function renderServer<T>(Comp: T, props: T extends ComponentType<infer C> ? ComponentProps<C> : any): {
+    render: (props?: {} | undefined, { $$slots, context }?: {
+        $$slots?: {} | undefined;
+        context?: Map<any, any> | undefined;
+    } | undefined) => {
+        html: any;
+        css: {
+            code: string;
+            map: any;
+        };
+        head: string;
+    };
+    $$render: (result: any, props: any, bindings: any, slots: any, context: any) => any;
+};
+declare const renderComponent: typeof renderServer | typeof renderClient;
 
 declare function flexRender(component: any, props: any): any;
 declare type ReadableOrVal<T> = T | Readable<T>;