/* tslint:disable */
/* eslint-disable */
/**
 * Aqaratech API
 * The Aqratech API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
	CreateExpenseCategoryDto,
	ExpenseCategoryDto,
	UpdateAllExpenseCategoriesDto,
	UpdateExpenseCategoryDto,
} from '../models';

export interface ExpenseCategoriesApiCreateRequest {
	createExpenseCategoryDto: CreateExpenseCategoryDto;
	xRoleId?: string;
}

export interface ExpenseCategoriesApiFindAllRequest {
	xRoleId?: string;
}

export interface ExpenseCategoriesApiUpdateRequest {
	id: string;
	updateExpenseCategoryDto: UpdateExpenseCategoryDto;
	xRoleId?: string;
}

export interface ExpenseCategoriesApiUpdateAllRequest {
	updateAllExpenseCategoriesDto: UpdateAllExpenseCategoriesDto;
	xRoleId?: string;
}

/**
 * ExpenseCategoriesApi - interface
 *
 * @export
 * @interface ExpenseCategoriesApiInterface
 */
export interface ExpenseCategoriesApiInterface {
	/**
	 *
	 * @summary
	 * @param {CreateExpenseCategoryDto} createExpenseCategoryDto
	 * @param {string} [xRoleId]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ExpenseCategoriesApiInterface
	 */
	createRaw(
		requestParameters: ExpenseCategoriesApiCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>>;

	/**
	 *
	 *
	 */
	create(
		requestParameters: ExpenseCategoriesApiCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string>;

	/**
	 *
	 * @summary
	 * @param {string} [xRoleId]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ExpenseCategoriesApiInterface
	 */
	findAllRaw(
		requestParameters: ExpenseCategoriesApiFindAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<Array<ExpenseCategoryDto>>>;

	/**
	 *
	 *
	 */
	findAll(
		requestParameters: ExpenseCategoriesApiFindAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<Array<ExpenseCategoryDto>>;

	/**
	 *
	 * @summary
	 * @param {string} id
	 * @param {UpdateExpenseCategoryDto} updateExpenseCategoryDto
	 * @param {string} [xRoleId]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ExpenseCategoriesApiInterface
	 */
	updateRaw(
		requestParameters: ExpenseCategoriesApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>>;

	/**
	 *
	 *
	 */
	update(
		requestParameters: ExpenseCategoriesApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string>;

	/**
	 *
	 * @summary
	 * @param {UpdateAllExpenseCategoriesDto} updateAllExpenseCategoriesDto
	 * @param {string} [xRoleId]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof ExpenseCategoriesApiInterface
	 */
	updateAllRaw(
		requestParameters: ExpenseCategoriesApiUpdateAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<Array<ExpenseCategoryDto>>>;

	/**
	 *
	 *
	 */
	updateAll(
		requestParameters: ExpenseCategoriesApiUpdateAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<Array<ExpenseCategoryDto>>;
}

/**
 *
 */
export class ExpenseCategoriesApi
	extends runtime.BaseAPI
	implements ExpenseCategoriesApiInterface
{
	/**
	 *
	 *
	 */
	async createRaw(
		requestParameters: ExpenseCategoriesApiCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>> {
		if (
			requestParameters.createExpenseCategoryDto === null ||
			requestParameters.createExpenseCategoryDto === undefined
		) {
			throw new runtime.RequiredError(
				'createExpenseCategoryDto',
				'Required parameter requestParameters.createExpenseCategoryDto was null or undefined when calling create.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xRoleId !== undefined &&
			requestParameters.xRoleId !== null
		) {
			headerParameters['x-role-id'] = String(requestParameters.xRoleId);
		}

		if (this.configuration && this.configuration.accessToken) {
			// oauth required
			headerParameters['Authorization'] = await this.configuration.accessToken(
				'oauth-swagger',
				[],
			);
		}

		const response = await this.request(
			{
				path: `/expense-categories`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.createExpenseCategoryDto,
			},
			initOverrides,
		);

		return new runtime.TextApiResponse(response) as any;
	}

	/**
	 *
	 *
	 */
	async create(
		requestParameters: ExpenseCategoriesApiCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string> {
		const response = await this.createRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async findAllRaw(
		requestParameters: ExpenseCategoriesApiFindAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<Array<ExpenseCategoryDto>>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xRoleId !== undefined &&
			requestParameters.xRoleId !== null
		) {
			headerParameters['x-role-id'] = String(requestParameters.xRoleId);
		}

		if (this.configuration && this.configuration.accessToken) {
			// oauth required
			headerParameters['Authorization'] = await this.configuration.accessToken(
				'oauth-swagger',
				[],
			);
		}

		const response = await this.request(
			{
				path: `/expense-categories`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async findAll(
		requestParameters: ExpenseCategoriesApiFindAllRequest = {},
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<Array<ExpenseCategoryDto>> {
		const response = await this.findAllRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async updateRaw(
		requestParameters: ExpenseCategoriesApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling update.',
			);
		}

		if (
			requestParameters.updateExpenseCategoryDto === null ||
			requestParameters.updateExpenseCategoryDto === undefined
		) {
			throw new runtime.RequiredError(
				'updateExpenseCategoryDto',
				'Required parameter requestParameters.updateExpenseCategoryDto was null or undefined when calling update.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xRoleId !== undefined &&
			requestParameters.xRoleId !== null
		) {
			headerParameters['x-role-id'] = String(requestParameters.xRoleId);
		}

		if (this.configuration && this.configuration.accessToken) {
			// oauth required
			headerParameters['Authorization'] = await this.configuration.accessToken(
				'oauth-swagger',
				[],
			);
		}

		const response = await this.request(
			{
				path: `/expense-categories/{id}`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'PATCH',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.updateExpenseCategoryDto,
			},
			initOverrides,
		);

		return new runtime.TextApiResponse(response) as any;
	}

	/**
	 *
	 *
	 */
	async update(
		requestParameters: ExpenseCategoriesApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string> {
		const response = await this.updateRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async updateAllRaw(
		requestParameters: ExpenseCategoriesApiUpdateAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<Array<ExpenseCategoryDto>>> {
		if (
			requestParameters.updateAllExpenseCategoriesDto === null ||
			requestParameters.updateAllExpenseCategoriesDto === undefined
		) {
			throw new runtime.RequiredError(
				'updateAllExpenseCategoriesDto',
				'Required parameter requestParameters.updateAllExpenseCategoriesDto was null or undefined when calling updateAll.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (
			requestParameters.xRoleId !== undefined &&
			requestParameters.xRoleId !== null
		) {
			headerParameters['x-role-id'] = String(requestParameters.xRoleId);
		}

		if (this.configuration && this.configuration.accessToken) {
			// oauth required
			headerParameters['Authorization'] = await this.configuration.accessToken(
				'oauth-swagger',
				[],
			);
		}

		const response = await this.request(
			{
				path: `/expense-categories`,
				method: 'PATCH',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.updateAllExpenseCategoriesDto,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async updateAll(
		requestParameters: ExpenseCategoriesApiUpdateAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<Array<ExpenseCategoryDto>> {
		const response = await this.updateAllRaw(requestParameters, initOverrides);
		return await response.value();
	}
}
