/* tslint:disable */
/* eslint-disable */
/**
 * Aqaratech
 * Aqaratech API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
	CreateExpenseDto,
	CreateLeaseDto,
	CreateLeaseInvoiceDto,
	CreateManyLeaseInvoicesDto,
	CreateOrganizationDto,
	CreatePortfolioDto,
	CreatePropertyDto,
	CreateTenantDto,
	CreateUnitDto,
	FileRelationKeyEnum,
	OrganizationCreatedDto,
	OrganizationDto,
	PaginatedOrganizationDto,
	PaginatedRoleDto,
	PartialExpenseDto,
	PartialLeaseDto,
	PartialLeaseInvoiceDto,
	PartialUnitDto,
	PortfolioDto,
	PropertyDto,
	SearchDto,
	SortOrderEnum,
	TenantDto,
	UpdateOrganizationDto,
} from '../models';

export interface OrganizationsApiCreateRequest {
	createOrganizationDto: CreateOrganizationDto;
}

export interface OrganizationsApiCreateExpenseRequest {
	organizationId: string;
	createExpenseDto: CreateExpenseDto;
}

export interface OrganizationsApiCreateInvoicesRequest {
	organizationId: string;
	id: string;
	createManyLeaseInvoicesDto: Array<CreateManyLeaseInvoicesDto>;
}

export interface OrganizationsApiCreateLeaseRequest {
	organizationId: string;
	createLeaseDto: CreateLeaseDto;
}

export interface OrganizationsApiCreateLeaseInvoiceRequest {
	organizationId: string;
	createLeaseInvoiceDto: CreateLeaseInvoiceDto;
}

export interface OrganizationsApiCreatePortfolioRequest {
	organizationId: string;
	createPortfolioDto: CreatePortfolioDto;
}

export interface OrganizationsApiCreatePropertyRequest {
	organizationId: string;
	createPropertyDto: CreatePropertyDto;
}

export interface OrganizationsApiCreateTenantRequest {
	organizationId: string;
	createTenantDto: CreateTenantDto;
}

export interface OrganizationsApiCreateUnitRequest {
	organizationId: string;
	createUnitDto: CreateUnitDto;
}

export interface OrganizationsApiCreate0Request {
	relationKey: FileRelationKeyEnum;
	file: Blob;
	organizationId: string;
	fileName: string;
	relationValue: string;
}

export interface OrganizationsApiFindOneRequest {
	id: string;
}

export interface OrganizationsApiFindRolesRequest {
	id: string;
	page?: number;
	take?: number;
	sortOrder?: SortOrderEnum;
	filter?: object;
	orderBy?: string;
}

export interface OrganizationsApiRemoveRequest {
	id: string;
}

export interface OrganizationsApiSearchRequest {
	id: string;
	query: string;
}

export interface OrganizationsApiUpdateRequest {
	id: string;
	updateOrganizationDto: UpdateOrganizationDto;
}

/**
 * OrganizationsApi - interface
 *
 * @export
 * @interface OrganizationsApiInterface
 */
export interface OrganizationsApiInterface {
	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof OrganizationsApiInterface
	 */
	createRaw(
		requestParameters: OrganizationsApiCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<OrganizationCreatedDto>>;

	/**
	 *
	 *
	 */
	create(
		requestParameters: OrganizationsApiCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<OrganizationCreatedDto>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof OrganizationsApiInterface
	 */
	createExpenseRaw(
		requestParameters: OrganizationsApiCreateExpenseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PartialExpenseDto>>;

	/**
	 *
	 *
	 */
	createExpense(
		requestParameters: OrganizationsApiCreateExpenseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PartialExpenseDto>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof OrganizationsApiInterface
	 */
	createInvoicesRaw(
		requestParameters: OrganizationsApiCreateInvoicesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>>;

	/**
	 *
	 *
	 */
	createInvoices(
		requestParameters: OrganizationsApiCreateInvoicesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof OrganizationsApiInterface
	 */
	createLeaseRaw(
		requestParameters: OrganizationsApiCreateLeaseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PartialLeaseDto>>;

	/**
	 *
	 *
	 */
	createLease(
		requestParameters: OrganizationsApiCreateLeaseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PartialLeaseDto>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof OrganizationsApiInterface
	 */
	createLeaseInvoiceRaw(
		requestParameters: OrganizationsApiCreateLeaseInvoiceRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PartialLeaseInvoiceDto>>;

	/**
	 *
	 *
	 */
	createLeaseInvoice(
		requestParameters: OrganizationsApiCreateLeaseInvoiceRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PartialLeaseInvoiceDto>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof OrganizationsApiInterface
	 */
	createPortfolioRaw(
		requestParameters: OrganizationsApiCreatePortfolioRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PortfolioDto>>;

	/**
	 *
	 *
	 */
	createPortfolio(
		requestParameters: OrganizationsApiCreatePortfolioRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PortfolioDto>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof OrganizationsApiInterface
	 */
	createPropertyRaw(
		requestParameters: OrganizationsApiCreatePropertyRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PropertyDto>>;

	/**
	 *
	 *
	 */
	createProperty(
		requestParameters: OrganizationsApiCreatePropertyRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PropertyDto>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof OrganizationsApiInterface
	 */
	createTenantRaw(
		requestParameters: OrganizationsApiCreateTenantRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<TenantDto>>;

	/**
	 *
	 *
	 */
	createTenant(
		requestParameters: OrganizationsApiCreateTenantRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<TenantDto>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof OrganizationsApiInterface
	 */
	createUnitRaw(
		requestParameters: OrganizationsApiCreateUnitRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PartialUnitDto>>;

	/**
	 *
	 *
	 */
	createUnit(
		requestParameters: OrganizationsApiCreateUnitRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PartialUnitDto>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof OrganizationsApiInterface
	 */
	create_1Raw(
		requestParameters: OrganizationsApiCreate0Request,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>>;

	/**
	 *
	 *
	 */
	create_1(
		requestParameters: OrganizationsApiCreate0Request,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof OrganizationsApiInterface
	 */
	findAllRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PaginatedOrganizationDto>>;

	/**
	 *
	 *
	 */
	findAll(
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PaginatedOrganizationDto>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof OrganizationsApiInterface
	 */
	findOneRaw(
		requestParameters: OrganizationsApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<OrganizationDto>>;

	/**
	 *
	 *
	 */
	findOne(
		requestParameters: OrganizationsApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<OrganizationDto>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof OrganizationsApiInterface
	 */
	findRolesRaw(
		requestParameters: OrganizationsApiFindRolesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PaginatedRoleDto>>;

	/**
	 *
	 *
	 */
	findRoles(
		requestParameters: OrganizationsApiFindRolesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PaginatedRoleDto>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof OrganizationsApiInterface
	 */
	removeRaw(
		requestParameters: OrganizationsApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<OrganizationDto>>;

	/**
	 *
	 *
	 */
	remove(
		requestParameters: OrganizationsApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<OrganizationDto>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof OrganizationsApiInterface
	 */
	searchRaw(
		requestParameters: OrganizationsApiSearchRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<Array<SearchDto>>>;

	/**
	 *
	 *
	 */
	search(
		requestParameters: OrganizationsApiSearchRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<Array<SearchDto>>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof OrganizationsApiInterface
	 */
	updateRaw(
		requestParameters: OrganizationsApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>>;

	/**
	 *
	 *
	 */
	update(
		requestParameters: OrganizationsApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string>;
}

/**
 *
 */
export class OrganizationsApi
	extends runtime.BaseAPI
	implements OrganizationsApiInterface
{
	/**
	 *
	 *
	 */
	async createRaw(
		requestParameters: OrganizationsApiCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<OrganizationCreatedDto>> {
		if (
			requestParameters.createOrganizationDto === null ||
			requestParameters.createOrganizationDto === undefined
		) {
			throw new runtime.RequiredError(
				'createOrganizationDto',
				'Required parameter requestParameters.createOrganizationDto was null or undefined when calling create.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request(
			{
				path: `/organizations`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.createOrganizationDto,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async create(
		requestParameters: OrganizationsApiCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<OrganizationCreatedDto> {
		const response = await this.createRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async createExpenseRaw(
		requestParameters: OrganizationsApiCreateExpenseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PartialExpenseDto>> {
		if (
			requestParameters.organizationId === null ||
			requestParameters.organizationId === undefined
		) {
			throw new runtime.RequiredError(
				'organizationId',
				'Required parameter requestParameters.organizationId was null or undefined when calling createExpense.',
			);
		}

		if (
			requestParameters.createExpenseDto === null ||
			requestParameters.createExpenseDto === undefined
		) {
			throw new runtime.RequiredError(
				'createExpenseDto',
				'Required parameter requestParameters.createExpenseDto was null or undefined when calling createExpense.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request(
			{
				path: `/organizations/{organizationId}/expenses`.replace(
					`{${'organizationId'}}`,
					encodeURIComponent(String(requestParameters.organizationId)),
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.createExpenseDto,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async createExpense(
		requestParameters: OrganizationsApiCreateExpenseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PartialExpenseDto> {
		const response = await this.createExpenseRaw(
			requestParameters,
			initOverrides,
		);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async createInvoicesRaw(
		requestParameters: OrganizationsApiCreateInvoicesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>> {
		if (
			requestParameters.organizationId === null ||
			requestParameters.organizationId === undefined
		) {
			throw new runtime.RequiredError(
				'organizationId',
				'Required parameter requestParameters.organizationId was null or undefined when calling createInvoices.',
			);
		}

		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling createInvoices.',
			);
		}

		if (
			requestParameters.createManyLeaseInvoicesDto === null ||
			requestParameters.createManyLeaseInvoicesDto === undefined
		) {
			throw new runtime.RequiredError(
				'createManyLeaseInvoicesDto',
				'Required parameter requestParameters.createManyLeaseInvoicesDto was null or undefined when calling createInvoices.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request(
			{
				path: `/organizations/{organizationId}/lease/{id}/leaseInvoices`
					.replace(
						`{${'organizationId'}}`,
						encodeURIComponent(String(requestParameters.organizationId)),
					)
					.replace(
						`{${'id'}}`,
						encodeURIComponent(String(requestParameters.id)),
					),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.createManyLeaseInvoicesDto,
			},
			initOverrides,
		);

		return new runtime.TextApiResponse(response) as any;
	}

	/**
	 *
	 *
	 */
	async createInvoices(
		requestParameters: OrganizationsApiCreateInvoicesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string> {
		const response = await this.createInvoicesRaw(
			requestParameters,
			initOverrides,
		);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async createLeaseRaw(
		requestParameters: OrganizationsApiCreateLeaseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PartialLeaseDto>> {
		if (
			requestParameters.organizationId === null ||
			requestParameters.organizationId === undefined
		) {
			throw new runtime.RequiredError(
				'organizationId',
				'Required parameter requestParameters.organizationId was null or undefined when calling createLease.',
			);
		}

		if (
			requestParameters.createLeaseDto === null ||
			requestParameters.createLeaseDto === undefined
		) {
			throw new runtime.RequiredError(
				'createLeaseDto',
				'Required parameter requestParameters.createLeaseDto was null or undefined when calling createLease.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request(
			{
				path: `/organizations/{organizationId}/leases`.replace(
					`{${'organizationId'}}`,
					encodeURIComponent(String(requestParameters.organizationId)),
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.createLeaseDto,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async createLease(
		requestParameters: OrganizationsApiCreateLeaseRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PartialLeaseDto> {
		const response = await this.createLeaseRaw(
			requestParameters,
			initOverrides,
		);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async createLeaseInvoiceRaw(
		requestParameters: OrganizationsApiCreateLeaseInvoiceRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PartialLeaseInvoiceDto>> {
		if (
			requestParameters.organizationId === null ||
			requestParameters.organizationId === undefined
		) {
			throw new runtime.RequiredError(
				'organizationId',
				'Required parameter requestParameters.organizationId was null or undefined when calling createLeaseInvoice.',
			);
		}

		if (
			requestParameters.createLeaseInvoiceDto === null ||
			requestParameters.createLeaseInvoiceDto === undefined
		) {
			throw new runtime.RequiredError(
				'createLeaseInvoiceDto',
				'Required parameter requestParameters.createLeaseInvoiceDto was null or undefined when calling createLeaseInvoice.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request(
			{
				path: `/organizations/{organizationId}/leaseInvoices`.replace(
					`{${'organizationId'}}`,
					encodeURIComponent(String(requestParameters.organizationId)),
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.createLeaseInvoiceDto,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async createLeaseInvoice(
		requestParameters: OrganizationsApiCreateLeaseInvoiceRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PartialLeaseInvoiceDto> {
		const response = await this.createLeaseInvoiceRaw(
			requestParameters,
			initOverrides,
		);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async createPortfolioRaw(
		requestParameters: OrganizationsApiCreatePortfolioRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PortfolioDto>> {
		if (
			requestParameters.organizationId === null ||
			requestParameters.organizationId === undefined
		) {
			throw new runtime.RequiredError(
				'organizationId',
				'Required parameter requestParameters.organizationId was null or undefined when calling createPortfolio.',
			);
		}

		if (
			requestParameters.createPortfolioDto === null ||
			requestParameters.createPortfolioDto === undefined
		) {
			throw new runtime.RequiredError(
				'createPortfolioDto',
				'Required parameter requestParameters.createPortfolioDto was null or undefined when calling createPortfolio.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request(
			{
				path: `/organizations/{organizationId}/portfolios`.replace(
					`{${'organizationId'}}`,
					encodeURIComponent(String(requestParameters.organizationId)),
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.createPortfolioDto,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async createPortfolio(
		requestParameters: OrganizationsApiCreatePortfolioRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PortfolioDto> {
		const response = await this.createPortfolioRaw(
			requestParameters,
			initOverrides,
		);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async createPropertyRaw(
		requestParameters: OrganizationsApiCreatePropertyRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PropertyDto>> {
		if (
			requestParameters.organizationId === null ||
			requestParameters.organizationId === undefined
		) {
			throw new runtime.RequiredError(
				'organizationId',
				'Required parameter requestParameters.organizationId was null or undefined when calling createProperty.',
			);
		}

		if (
			requestParameters.createPropertyDto === null ||
			requestParameters.createPropertyDto === undefined
		) {
			throw new runtime.RequiredError(
				'createPropertyDto',
				'Required parameter requestParameters.createPropertyDto was null or undefined when calling createProperty.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request(
			{
				path: `/organizations/{organizationId}/properties`.replace(
					`{${'organizationId'}}`,
					encodeURIComponent(String(requestParameters.organizationId)),
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.createPropertyDto,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async createProperty(
		requestParameters: OrganizationsApiCreatePropertyRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PropertyDto> {
		const response = await this.createPropertyRaw(
			requestParameters,
			initOverrides,
		);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async createTenantRaw(
		requestParameters: OrganizationsApiCreateTenantRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<TenantDto>> {
		if (
			requestParameters.organizationId === null ||
			requestParameters.organizationId === undefined
		) {
			throw new runtime.RequiredError(
				'organizationId',
				'Required parameter requestParameters.organizationId was null or undefined when calling createTenant.',
			);
		}

		if (
			requestParameters.createTenantDto === null ||
			requestParameters.createTenantDto === undefined
		) {
			throw new runtime.RequiredError(
				'createTenantDto',
				'Required parameter requestParameters.createTenantDto was null or undefined when calling createTenant.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request(
			{
				path: `/organizations/{organizationId}/tenants`.replace(
					`{${'organizationId'}}`,
					encodeURIComponent(String(requestParameters.organizationId)),
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.createTenantDto,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async createTenant(
		requestParameters: OrganizationsApiCreateTenantRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<TenantDto> {
		const response = await this.createTenantRaw(
			requestParameters,
			initOverrides,
		);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async createUnitRaw(
		requestParameters: OrganizationsApiCreateUnitRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PartialUnitDto>> {
		if (
			requestParameters.organizationId === null ||
			requestParameters.organizationId === undefined
		) {
			throw new runtime.RequiredError(
				'organizationId',
				'Required parameter requestParameters.organizationId was null or undefined when calling createUnit.',
			);
		}

		if (
			requestParameters.createUnitDto === null ||
			requestParameters.createUnitDto === undefined
		) {
			throw new runtime.RequiredError(
				'createUnitDto',
				'Required parameter requestParameters.createUnitDto was null or undefined when calling createUnit.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request(
			{
				path: `/organizations/{organizationId}/units`.replace(
					`{${'organizationId'}}`,
					encodeURIComponent(String(requestParameters.organizationId)),
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.createUnitDto,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async createUnit(
		requestParameters: OrganizationsApiCreateUnitRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PartialUnitDto> {
		const response = await this.createUnitRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async create_1Raw(
		requestParameters: OrganizationsApiCreate0Request,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>> {
		if (
			requestParameters.relationKey === null ||
			requestParameters.relationKey === undefined
		) {
			throw new runtime.RequiredError(
				'relationKey',
				'Required parameter requestParameters.relationKey was null or undefined when calling create_1.',
			);
		}

		if (
			requestParameters.file === null ||
			requestParameters.file === undefined
		) {
			throw new runtime.RequiredError(
				'file',
				'Required parameter requestParameters.file was null or undefined when calling create_1.',
			);
		}

		if (
			requestParameters.organizationId === null ||
			requestParameters.organizationId === undefined
		) {
			throw new runtime.RequiredError(
				'organizationId',
				'Required parameter requestParameters.organizationId was null or undefined when calling create_1.',
			);
		}

		if (
			requestParameters.fileName === null ||
			requestParameters.fileName === undefined
		) {
			throw new runtime.RequiredError(
				'fileName',
				'Required parameter requestParameters.fileName was null or undefined when calling create_1.',
			);
		}

		if (
			requestParameters.relationValue === null ||
			requestParameters.relationValue === undefined
		) {
			throw new runtime.RequiredError(
				'relationValue',
				'Required parameter requestParameters.relationValue was null or undefined when calling create_1.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const consumes: runtime.Consume[] = [
			{ contentType: 'multipart/form-data' },
		];
		// @ts-ignore: canConsumeForm may be unused
		const canConsumeForm = runtime.canConsumeForm(consumes);

		let formParams: { append(param: string, value: any): any };
		let useForm = false;
		// use FormData to transmit files using content-type "multipart/form-data"
		useForm = canConsumeForm;
		if (useForm) {
			formParams = new FormData();
		} else {
			formParams = new URLSearchParams();
		}

		if (requestParameters.relationKey !== undefined) {
			formParams.append(
				'relationKey',
				new Blob([JSON.stringify(requestParameters.relationKey)], {
					type: 'application/json',
				}),
			);
		}

		if (requestParameters.file !== undefined) {
			formParams.append('file', requestParameters.file as any);
		}

		if (requestParameters.organizationId !== undefined) {
			formParams.append(
				'organizationId',
				requestParameters.organizationId as any,
			);
		}

		if (requestParameters.fileName !== undefined) {
			formParams.append('fileName', requestParameters.fileName as any);
		}

		if (requestParameters.relationValue !== undefined) {
			formParams.append(
				'relationValue',
				requestParameters.relationValue as any,
			);
		}

		const response = await this.request(
			{
				path: `/organizations/{organizationId}/files`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: formParams,
			},
			initOverrides,
		);

		return new runtime.TextApiResponse(response) as any;
	}

	/**
	 *
	 *
	 */
	async create_1(
		requestParameters: OrganizationsApiCreate0Request,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string> {
		const response = await this.create_1Raw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async findAllRaw(
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PaginatedOrganizationDto>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/organizations`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async findAll(
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PaginatedOrganizationDto> {
		const response = await this.findAllRaw(initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async findOneRaw(
		requestParameters: OrganizationsApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<OrganizationDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling findOne.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/organizations/{id}`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async findOne(
		requestParameters: OrganizationsApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<OrganizationDto> {
		const response = await this.findOneRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async findRolesRaw(
		requestParameters: OrganizationsApiFindRolesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PaginatedRoleDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling findRoles.',
			);
		}

		const queryParameters: any = {};

		if (requestParameters.page !== undefined) {
			queryParameters['page'] = requestParameters.page;
		}

		if (requestParameters.take !== undefined) {
			queryParameters['take'] = requestParameters.take;
		}

		if (requestParameters.sortOrder !== undefined) {
			queryParameters['sortOrder'] = requestParameters.sortOrder;
		}

		if (requestParameters.filter !== undefined) {
			queryParameters['filter'] = requestParameters.filter;
		}

		if (requestParameters.orderBy !== undefined) {
			queryParameters['orderBy'] = requestParameters.orderBy;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/organizations/{id}/roles`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async findRoles(
		requestParameters: OrganizationsApiFindRolesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PaginatedRoleDto> {
		const response = await this.findRolesRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async removeRaw(
		requestParameters: OrganizationsApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<OrganizationDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling remove.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/organizations/{id}`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async remove(
		requestParameters: OrganizationsApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<OrganizationDto> {
		const response = await this.removeRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async searchRaw(
		requestParameters: OrganizationsApiSearchRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<Array<SearchDto>>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling search.',
			);
		}

		if (
			requestParameters.query === null ||
			requestParameters.query === undefined
		) {
			throw new runtime.RequiredError(
				'query',
				'Required parameter requestParameters.query was null or undefined when calling search.',
			);
		}

		const queryParameters: any = {};

		if (requestParameters.query !== undefined) {
			queryParameters['query'] = requestParameters.query;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/organizations/{id}/search`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async search(
		requestParameters: OrganizationsApiSearchRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<Array<SearchDto>> {
		const response = await this.searchRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async updateRaw(
		requestParameters: OrganizationsApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling update.',
			);
		}

		if (
			requestParameters.updateOrganizationDto === null ||
			requestParameters.updateOrganizationDto === undefined
		) {
			throw new runtime.RequiredError(
				'updateOrganizationDto',
				'Required parameter requestParameters.updateOrganizationDto was null or undefined when calling update.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request(
			{
				path: `/organizations/{id}`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'PATCH',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.updateOrganizationDto,
			},
			initOverrides,
		);

		return new runtime.TextApiResponse(response) as any;
	}

	/**
	 *
	 *
	 */
	async update(
		requestParameters: OrganizationsApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string> {
		const response = await this.updateRaw(requestParameters, initOverrides);
		return await response.value();
	}
}
