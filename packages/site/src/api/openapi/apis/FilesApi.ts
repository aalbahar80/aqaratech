/* tslint:disable */
/* eslint-disable */
/**
 * Aqaratech
 * Aqaratech API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { FileRelationKeyEnum, PaginatedFileDto } from '../models';

export interface FilesApiFindAllRequest {
	relationKey: FileRelationKeyEnum;
	relationValue: string;
}

export interface FilesApiFindOneRequest {
	key: string;
}

export interface FilesApiRemoveRequest {
	key: string;
}

/**
 * FilesApi - interface
 *
 * @export
 * @interface FilesApiInterface
 */
export interface FilesApiInterface {
	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof FilesApiInterface
	 */
	findAllRaw(
		requestParameters: FilesApiFindAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PaginatedFileDto>>;

	/**
	 *
	 *
	 */
	findAll(
		requestParameters: FilesApiFindAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PaginatedFileDto>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof FilesApiInterface
	 */
	findOneRaw(
		requestParameters: FilesApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>>;

	/**
	 *
	 *
	 */
	findOne(
		requestParameters: FilesApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof FilesApiInterface
	 */
	removeRaw(
		requestParameters: FilesApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>>;

	/**
	 *
	 *
	 */
	remove(
		requestParameters: FilesApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string>;
}

/**
 *
 */
export class FilesApi extends runtime.BaseAPI implements FilesApiInterface {
	/**
	 *
	 *
	 */
	async findAllRaw(
		requestParameters: FilesApiFindAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PaginatedFileDto>> {
		if (
			requestParameters.relationKey === null ||
			requestParameters.relationKey === undefined
		) {
			throw new runtime.RequiredError(
				'relationKey',
				'Required parameter requestParameters.relationKey was null or undefined when calling findAll.',
			);
		}

		if (
			requestParameters.relationValue === null ||
			requestParameters.relationValue === undefined
		) {
			throw new runtime.RequiredError(
				'relationValue',
				'Required parameter requestParameters.relationValue was null or undefined when calling findAll.',
			);
		}

		const queryParameters: any = {};

		if (requestParameters.relationKey !== undefined) {
			queryParameters['relationKey'] = requestParameters.relationKey;
		}

		if (requestParameters.relationValue !== undefined) {
			queryParameters['relationValue'] = requestParameters.relationValue;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/files`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async findAll(
		requestParameters: FilesApiFindAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PaginatedFileDto> {
		const response = await this.findAllRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async findOneRaw(
		requestParameters: FilesApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>> {
		if (requestParameters.key === null || requestParameters.key === undefined) {
			throw new runtime.RequiredError(
				'key',
				'Required parameter requestParameters.key was null or undefined when calling findOne.',
			);
		}

		const queryParameters: any = {};

		if (requestParameters.key !== undefined) {
			queryParameters['key'] = requestParameters.key;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/files/find-one`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.TextApiResponse(response) as any;
	}

	/**
	 *
	 *
	 */
	async findOne(
		requestParameters: FilesApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string> {
		const response = await this.findOneRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async removeRaw(
		requestParameters: FilesApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>> {
		if (requestParameters.key === null || requestParameters.key === undefined) {
			throw new runtime.RequiredError(
				'key',
				'Required parameter requestParameters.key was null or undefined when calling remove.',
			);
		}

		const queryParameters: any = {};

		if (requestParameters.key !== undefined) {
			queryParameters['key'] = requestParameters.key;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/files`,
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.TextApiResponse(response) as any;
	}

	/**
	 *
	 *
	 */
	async remove(
		requestParameters: FilesApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string> {
		const response = await this.removeRaw(requestParameters, initOverrides);
		return await response.value();
	}
}
