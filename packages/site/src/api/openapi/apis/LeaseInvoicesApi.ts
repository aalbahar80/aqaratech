/* tslint:disable */
/* eslint-disable */
/**
 * Aqaratech
 * Aqaratech API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
	CreateLeaseInvoiceDto,
	LeaseInvoiceDto,
	PaginatedLeaseInvoiceDto,
	PaidStatusEnum,
	PartialLeaseInvoiceDto,
	SortOrderEnum,
	UpdateLeaseInvoiceDto,
} from '../models';

export interface LeaseInvoicesApiCreateRequest {
	createLeaseInvoiceDto: CreateLeaseInvoiceDto;
}

export interface LeaseInvoicesApiFindAllRequest {
	page?: number;
	take?: number;
	sortOrder?: SortOrderEnum;
	filter?: object;
	start?: string;
	end?: string;
	paidStatus?: PaidStatusEnum;
	orderBy?: string;
	portfolioId?: string;
	propertyId?: string;
	unitId?: string;
}

export interface LeaseInvoicesApiFindOneRequest {
	id: string;
}

export interface LeaseInvoicesApiRemoveRequest {
	id: string;
}

export interface LeaseInvoicesApiSendEmailRequest {
	id: string;
}

export interface LeaseInvoicesApiUpdateRequest {
	id: string;
	updateLeaseInvoiceDto: UpdateLeaseInvoiceDto;
}

/**
 * LeaseInvoicesApi - interface
 *
 * @export
 * @interface LeaseInvoicesApiInterface
 */
export interface LeaseInvoicesApiInterface {
	/**
	 *
	 * @summary
	 * @param {CreateLeaseInvoiceDto} createLeaseInvoiceDto
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof LeaseInvoicesApiInterface
	 */
	createRaw(
		requestParameters: LeaseInvoicesApiCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PartialLeaseInvoiceDto>>;

	/**
	 *
	 *
	 */
	create(
		requestParameters: LeaseInvoicesApiCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PartialLeaseInvoiceDto>;

	/**
	 *
	 * @summary
	 * @param {number} [page]
	 * @param {number} [take]
	 * @param {SortOrderEnum} [sortOrder]
	 * @param {object} [filter]
	 * @param {string} [start]
	 * @param {string} [end]
	 * @param {PaidStatusEnum} [paidStatus]
	 * @param {string} [orderBy]
	 * @param {string} [portfolioId]
	 * @param {string} [propertyId]
	 * @param {string} [unitId]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof LeaseInvoicesApiInterface
	 */
	findAllRaw(
		requestParameters: LeaseInvoicesApiFindAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PaginatedLeaseInvoiceDto>>;

	/**
	 *
	 *
	 */
	findAll(
		requestParameters: LeaseInvoicesApiFindAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PaginatedLeaseInvoiceDto>;

	/**
	 *
	 * @summary
	 * @param {string} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof LeaseInvoicesApiInterface
	 */
	findOneRaw(
		requestParameters: LeaseInvoicesApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<LeaseInvoiceDto>>;

	/**
	 *
	 *
	 */
	findOne(
		requestParameters: LeaseInvoicesApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<LeaseInvoiceDto>;

	/**
	 *
	 * @summary
	 * @param {string} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof LeaseInvoicesApiInterface
	 */
	removeRaw(
		requestParameters: LeaseInvoicesApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>>;

	/**
	 *
	 *
	 */
	remove(
		requestParameters: LeaseInvoicesApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string>;

	/**
	 *
	 * @summary
	 * @param {string} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof LeaseInvoicesApiInterface
	 */
	sendEmailRaw(
		requestParameters: LeaseInvoicesApiSendEmailRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>>;

	/**
	 *
	 *
	 */
	sendEmail(
		requestParameters: LeaseInvoicesApiSendEmailRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string>;

	/**
	 *
	 * @summary
	 * @param {string} id
	 * @param {UpdateLeaseInvoiceDto} updateLeaseInvoiceDto
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof LeaseInvoicesApiInterface
	 */
	updateRaw(
		requestParameters: LeaseInvoicesApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PartialLeaseInvoiceDto>>;

	/**
	 *
	 *
	 */
	update(
		requestParameters: LeaseInvoicesApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PartialLeaseInvoiceDto>;
}

/**
 *
 */
export class LeaseInvoicesApi
	extends runtime.BaseAPI
	implements LeaseInvoicesApiInterface
{
	/**
	 *
	 *
	 */
	async createRaw(
		requestParameters: LeaseInvoicesApiCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PartialLeaseInvoiceDto>> {
		if (
			requestParameters.createLeaseInvoiceDto === null ||
			requestParameters.createLeaseInvoiceDto === undefined
		) {
			throw new runtime.RequiredError(
				'createLeaseInvoiceDto',
				'Required parameter requestParameters.createLeaseInvoiceDto was null or undefined when calling create.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (this.configuration && this.configuration.accessToken) {
			const token = this.configuration.accessToken;
			const tokenString = await token('bearer', []);

			if (tokenString) {
				headerParameters['Authorization'] = `Bearer ${tokenString}`;
			}
		}
		const response = await this.request(
			{
				path: `/leaseInvoices`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.createLeaseInvoiceDto,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async create(
		requestParameters: LeaseInvoicesApiCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PartialLeaseInvoiceDto> {
		const response = await this.createRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async findAllRaw(
		requestParameters: LeaseInvoicesApiFindAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PaginatedLeaseInvoiceDto>> {
		const queryParameters: any = {};

		if (requestParameters.page !== undefined) {
			queryParameters['page'] = requestParameters.page;
		}

		if (requestParameters.take !== undefined) {
			queryParameters['take'] = requestParameters.take;
		}

		if (requestParameters.sortOrder !== undefined) {
			queryParameters['sortOrder'] = requestParameters.sortOrder;
		}

		if (requestParameters.filter !== undefined) {
			queryParameters['filter'] = requestParameters.filter;
		}

		if (requestParameters.start !== undefined) {
			queryParameters['start'] = requestParameters.start;
		}

		if (requestParameters.end !== undefined) {
			queryParameters['end'] = requestParameters.end;
		}

		if (requestParameters.paidStatus !== undefined) {
			queryParameters['paidStatus'] = requestParameters.paidStatus;
		}

		if (requestParameters.orderBy !== undefined) {
			queryParameters['orderBy'] = requestParameters.orderBy;
		}

		if (requestParameters.portfolioId !== undefined) {
			queryParameters['portfolioId'] = requestParameters.portfolioId;
		}

		if (requestParameters.propertyId !== undefined) {
			queryParameters['propertyId'] = requestParameters.propertyId;
		}

		if (requestParameters.unitId !== undefined) {
			queryParameters['unitId'] = requestParameters.unitId;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.accessToken) {
			const token = this.configuration.accessToken;
			const tokenString = await token('bearer', []);

			if (tokenString) {
				headerParameters['Authorization'] = `Bearer ${tokenString}`;
			}
		}
		const response = await this.request(
			{
				path: `/leaseInvoices`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async findAll(
		requestParameters: LeaseInvoicesApiFindAllRequest = {},
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PaginatedLeaseInvoiceDto> {
		const response = await this.findAllRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async findOneRaw(
		requestParameters: LeaseInvoicesApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<LeaseInvoiceDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling findOne.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.accessToken) {
			const token = this.configuration.accessToken;
			const tokenString = await token('bearer', []);

			if (tokenString) {
				headerParameters['Authorization'] = `Bearer ${tokenString}`;
			}
		}
		const response = await this.request(
			{
				path: `/leaseInvoices/{id}`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async findOne(
		requestParameters: LeaseInvoicesApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<LeaseInvoiceDto> {
		const response = await this.findOneRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async removeRaw(
		requestParameters: LeaseInvoicesApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling remove.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.accessToken) {
			const token = this.configuration.accessToken;
			const tokenString = await token('bearer', []);

			if (tokenString) {
				headerParameters['Authorization'] = `Bearer ${tokenString}`;
			}
		}
		const response = await this.request(
			{
				path: `/leaseInvoices/{id}`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.TextApiResponse(response) as any;
	}

	/**
	 *
	 *
	 */
	async remove(
		requestParameters: LeaseInvoicesApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string> {
		const response = await this.removeRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async sendEmailRaw(
		requestParameters: LeaseInvoicesApiSendEmailRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling sendEmail.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (this.configuration && this.configuration.accessToken) {
			const token = this.configuration.accessToken;
			const tokenString = await token('bearer', []);

			if (tokenString) {
				headerParameters['Authorization'] = `Bearer ${tokenString}`;
			}
		}
		const response = await this.request(
			{
				path: `/leaseInvoices/{id}/send-email`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.TextApiResponse(response) as any;
	}

	/**
	 *
	 *
	 */
	async sendEmail(
		requestParameters: LeaseInvoicesApiSendEmailRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string> {
		const response = await this.sendEmailRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async updateRaw(
		requestParameters: LeaseInvoicesApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PartialLeaseInvoiceDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling update.',
			);
		}

		if (
			requestParameters.updateLeaseInvoiceDto === null ||
			requestParameters.updateLeaseInvoiceDto === undefined
		) {
			throw new runtime.RequiredError(
				'updateLeaseInvoiceDto',
				'Required parameter requestParameters.updateLeaseInvoiceDto was null or undefined when calling update.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		if (this.configuration && this.configuration.accessToken) {
			const token = this.configuration.accessToken;
			const tokenString = await token('bearer', []);

			if (tokenString) {
				headerParameters['Authorization'] = `Bearer ${tokenString}`;
			}
		}
		const response = await this.request(
			{
				path: `/leaseInvoices/{id}`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'PATCH',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.updateLeaseInvoiceDto,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async update(
		requestParameters: LeaseInvoicesApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PartialLeaseInvoiceDto> {
		const response = await this.updateRaw(requestParameters, initOverrides);
		return await response.value();
	}
}
