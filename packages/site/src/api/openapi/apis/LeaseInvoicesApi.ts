/* tslint:disable */
/* eslint-disable */
/**
 * Aqaratech
 * Aqaratech API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
	LeaseInvoiceDto,
	PartialLeaseInvoiceDto,
	UpdateLeaseInvoiceDto,
} from '../models';

export interface LeaseInvoicesApiFindOneRequest {
	id: string;
}

export interface LeaseInvoicesApiRemoveRequest {
	id: string;
}

export interface LeaseInvoicesApiSendEmailRequest {
	id: string;
}

export interface LeaseInvoicesApiUpdateRequest {
	id: string;
	updateLeaseInvoiceDto: UpdateLeaseInvoiceDto;
}

/**
 * LeaseInvoicesApi - interface
 *
 * @export
 * @interface LeaseInvoicesApiInterface
 */
export interface LeaseInvoicesApiInterface {
	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof LeaseInvoicesApiInterface
	 */
	findOneRaw(
		requestParameters: LeaseInvoicesApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<LeaseInvoiceDto>>;

	/**
	 *
	 *
	 */
	findOne(
		requestParameters: LeaseInvoicesApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<LeaseInvoiceDto>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof LeaseInvoicesApiInterface
	 */
	removeRaw(
		requestParameters: LeaseInvoicesApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>>;

	/**
	 *
	 *
	 */
	remove(
		requestParameters: LeaseInvoicesApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof LeaseInvoicesApiInterface
	 */
	sendEmailRaw(
		requestParameters: LeaseInvoicesApiSendEmailRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>>;

	/**
	 *
	 *
	 */
	sendEmail(
		requestParameters: LeaseInvoicesApiSendEmailRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string>;

	/**
	 *
	 * @summary
	 * @throws {RequiredError}
	 * @memberof LeaseInvoicesApiInterface
	 */
	updateRaw(
		requestParameters: LeaseInvoicesApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PartialLeaseInvoiceDto>>;

	/**
	 *
	 *
	 */
	update(
		requestParameters: LeaseInvoicesApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PartialLeaseInvoiceDto>;
}

/**
 *
 */
export class LeaseInvoicesApi
	extends runtime.BaseAPI
	implements LeaseInvoicesApiInterface
{
	/**
	 *
	 *
	 */
	async findOneRaw(
		requestParameters: LeaseInvoicesApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<LeaseInvoiceDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling findOne.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/leaseInvoices/{id}`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async findOne(
		requestParameters: LeaseInvoicesApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<LeaseInvoiceDto> {
		const response = await this.findOneRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async removeRaw(
		requestParameters: LeaseInvoicesApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling remove.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/leaseInvoices/{id}`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.TextApiResponse(response) as any;
	}

	/**
	 *
	 *
	 */
	async remove(
		requestParameters: LeaseInvoicesApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string> {
		const response = await this.removeRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async sendEmailRaw(
		requestParameters: LeaseInvoicesApiSendEmailRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling sendEmail.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/leaseInvoices/{id}/send-email`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.TextApiResponse(response) as any;
	}

	/**
	 *
	 *
	 */
	async sendEmail(
		requestParameters: LeaseInvoicesApiSendEmailRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string> {
		const response = await this.sendEmailRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async updateRaw(
		requestParameters: LeaseInvoicesApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PartialLeaseInvoiceDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling update.',
			);
		}

		if (
			requestParameters.updateLeaseInvoiceDto === null ||
			requestParameters.updateLeaseInvoiceDto === undefined
		) {
			throw new runtime.RequiredError(
				'updateLeaseInvoiceDto',
				'Required parameter requestParameters.updateLeaseInvoiceDto was null or undefined when calling update.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request(
			{
				path: `/leaseInvoices/{id}`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'PATCH',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.updateLeaseInvoiceDto,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async update(
		requestParameters: LeaseInvoicesApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PartialLeaseInvoiceDto> {
		const response = await this.updateRaw(requestParameters, initOverrides);
		return await response.value();
	}
}
