/* tslint:disable */
/* eslint-disable */
/**
 * Aqaratech
 * Aqaratech API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
	BalanceDto,
	GroupByCategoryDto,
	GroupByLocationDto,
	GroupByMonthDto,
	Occupancy,
	PaginatedExpenseDto,
	PaginatedLeaseInvoiceDto,
	PaginatedPayoutDto,
	PaginatedPortfolioDto,
	PaginatedPropertyDto,
	PaginatedRoleDto,
	PaginatedUnitDto,
	PaginatedUnitMinimalDto,
	PortfolioDto,
	RangeKind,
	UpdatePortfolioDto,
} from '../models';

export interface PortfoliosApiFindAllRequest {
	page?: number | undefined;
	skip?: number | undefined;
	take?: number | undefined;
	sort?: Array<string> | undefined;
	filter?: object | undefined;
	filterCustom?: object | undefined;
}

export interface PortfoliosApiFindAllExpensesRequest {
	id: string;
	page?: number | undefined;
	skip?: number | undefined;
	take?: number | undefined;
	sort?: Array<string> | undefined;
	filter?: object | undefined;
	filterCustom?: object | undefined;
	propertyId?: string | null | undefined;
	unitId?: string | null | undefined;
}

export interface PortfoliosApiFindAllLeaseInvoicesRequest {
	id: string;
	page?: number | undefined;
	skip?: number | undefined;
	take?: number | undefined;
	sort?: Array<string> | undefined;
	filter?: object | undefined;
	filterCustom?: object | undefined;
}

export interface PortfoliosApiFindOneRequest {
	id: string;
}

export interface PortfoliosApiFindPayoutsRequest {
	id: string;
	page?: number | undefined;
	skip?: number | undefined;
	take?: number | undefined;
	sort?: Array<string> | undefined;
	filter?: object | undefined;
	filterCustom?: object | undefined;
}

export interface PortfoliosApiFindPropertiesRequest {
	id: string;
	page?: number | undefined;
	skip?: number | undefined;
	take?: number | undefined;
	sort?: Array<string> | undefined;
	filter?: object | undefined;
	filterCustom?: object | undefined;
}

export interface PortfoliosApiFindRolesRequest {
	id: string;
	page?: number | undefined;
	skip?: number | undefined;
	take?: number | undefined;
	sort?: Array<string> | undefined;
	filter?: object | undefined;
	filterCustom?: object | undefined;
}

export interface PortfoliosApiFindUnitsRequest {
	id: string;
	page?: number | undefined;
	skip?: number | undefined;
	take?: number | undefined;
	sort?: Array<string> | undefined;
	filter?: object | undefined;
	filterCustom?: object | undefined;
}

export interface PortfoliosApiFindUnitsMinimalRequest {
	id: string;
	page?: number | undefined;
	skip?: number | undefined;
	take?: number | undefined;
	sort?: Array<string> | undefined;
	filter?: object | undefined;
	filterCustom?: object | undefined;
}

export interface PortfoliosApiGetBalanceRequest {
	id: string;
}

export interface PortfoliosApiGetExpensesByCategoryRequest {
	organizationId: string;
	portfolioId: string;
	start?: string | undefined;
	end?: string | undefined;
	propertyId?: string | null | undefined;
	unitId?: string | null | undefined;
}

export interface PortfoliosApiGetExpensesByLocationRequest {
	organizationId: string;
	portfolioId: string;
	start?: string | undefined;
	end?: string | undefined;
	propertyId?: string | null | undefined;
	unitId?: string | null | undefined;
}

export interface PortfoliosApiGetExpensesByMonthRequest {
	organizationId: string;
	portfolioId: string;
	start?: string | undefined;
	end?: string | undefined;
	propertyId?: string | null | undefined;
	unitId?: string | null | undefined;
}

export interface PortfoliosApiGetOccupancyRequest {
	organizationId: string;
	portfolioId: string;
	start?: string | undefined;
	end?: string | undefined;
	rangeKind?: RangeKind | undefined;
	propertyId?: string | undefined;
	unitId?: string | undefined;
}

export interface PortfoliosApiRemoveRequest {
	id: string;
}

export interface PortfoliosApiUpdateRequest {
	id: string;
	updatePortfolioDto: UpdatePortfolioDto;
}

/**
 *
 */
export class PortfoliosApi extends runtime.BaseAPI {
	/**
	 */
	async findAllRaw(
		requestParameters: PortfoliosApiFindAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PaginatedPortfolioDto>> {
		const queryParameters: any = {};

		if (requestParameters.page !== undefined) {
			queryParameters['page'] = requestParameters.page;
		}

		if (requestParameters.skip !== undefined) {
			queryParameters['skip'] = requestParameters.skip;
		}

		if (requestParameters.take !== undefined) {
			queryParameters['take'] = requestParameters.take;
		}

		if (requestParameters.sort) {
			queryParameters['sort'] = requestParameters.sort;
		}

		if (requestParameters.filter !== undefined) {
			queryParameters['filter'] = requestParameters.filter;
		}

		if (requestParameters.filterCustom !== undefined) {
			queryParameters['filterCustom'] = requestParameters.filterCustom;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/portfolios`,
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 */
	async findAll(
		requestParameters: PortfoliosApiFindAllRequest = {},
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PaginatedPortfolioDto> {
		const response = await this.findAllRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async findAllExpensesRaw(
		requestParameters: PortfoliosApiFindAllExpensesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PaginatedExpenseDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling findAllExpenses.',
			);
		}

		const queryParameters: any = {};

		if (requestParameters.page !== undefined) {
			queryParameters['page'] = requestParameters.page;
		}

		if (requestParameters.skip !== undefined) {
			queryParameters['skip'] = requestParameters.skip;
		}

		if (requestParameters.take !== undefined) {
			queryParameters['take'] = requestParameters.take;
		}

		if (requestParameters.sort) {
			queryParameters['sort'] = requestParameters.sort;
		}

		if (requestParameters.filter !== undefined) {
			queryParameters['filter'] = requestParameters.filter;
		}

		if (requestParameters.filterCustom !== undefined) {
			queryParameters['filterCustom'] = requestParameters.filterCustom;
		}

		if (requestParameters.propertyId !== undefined) {
			queryParameters['propertyId'] = requestParameters.propertyId;
		}

		if (requestParameters.unitId !== undefined) {
			queryParameters['unitId'] = requestParameters.unitId;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/portfolios/{id}/expenses`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 */
	async findAllExpenses(
		requestParameters: PortfoliosApiFindAllExpensesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PaginatedExpenseDto> {
		const response = await this.findAllExpensesRaw(
			requestParameters,
			initOverrides,
		);
		return await response.value();
	}

	/**
	 */
	async findAllLeaseInvoicesRaw(
		requestParameters: PortfoliosApiFindAllLeaseInvoicesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PaginatedLeaseInvoiceDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling findAllLeaseInvoices.',
			);
		}

		const queryParameters: any = {};

		if (requestParameters.page !== undefined) {
			queryParameters['page'] = requestParameters.page;
		}

		if (requestParameters.skip !== undefined) {
			queryParameters['skip'] = requestParameters.skip;
		}

		if (requestParameters.take !== undefined) {
			queryParameters['take'] = requestParameters.take;
		}

		if (requestParameters.sort) {
			queryParameters['sort'] = requestParameters.sort;
		}

		if (requestParameters.filter !== undefined) {
			queryParameters['filter'] = requestParameters.filter;
		}

		if (requestParameters.filterCustom !== undefined) {
			queryParameters['filterCustom'] = requestParameters.filterCustom;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/portfolios/{id}/leaseInvoices`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 */
	async findAllLeaseInvoices(
		requestParameters: PortfoliosApiFindAllLeaseInvoicesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PaginatedLeaseInvoiceDto> {
		const response = await this.findAllLeaseInvoicesRaw(
			requestParameters,
			initOverrides,
		);
		return await response.value();
	}

	/**
	 */
	async findOneRaw(
		requestParameters: PortfoliosApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PortfolioDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling findOne.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/portfolios/{id}`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 */
	async findOne(
		requestParameters: PortfoliosApiFindOneRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PortfolioDto> {
		const response = await this.findOneRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async findPayoutsRaw(
		requestParameters: PortfoliosApiFindPayoutsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PaginatedPayoutDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling findPayouts.',
			);
		}

		const queryParameters: any = {};

		if (requestParameters.page !== undefined) {
			queryParameters['page'] = requestParameters.page;
		}

		if (requestParameters.skip !== undefined) {
			queryParameters['skip'] = requestParameters.skip;
		}

		if (requestParameters.take !== undefined) {
			queryParameters['take'] = requestParameters.take;
		}

		if (requestParameters.sort) {
			queryParameters['sort'] = requestParameters.sort;
		}

		if (requestParameters.filter !== undefined) {
			queryParameters['filter'] = requestParameters.filter;
		}

		if (requestParameters.filterCustom !== undefined) {
			queryParameters['filterCustom'] = requestParameters.filterCustom;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/portfolios/{id}/payouts`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 */
	async findPayouts(
		requestParameters: PortfoliosApiFindPayoutsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PaginatedPayoutDto> {
		const response = await this.findPayoutsRaw(
			requestParameters,
			initOverrides,
		);
		return await response.value();
	}

	/**
	 */
	async findPropertiesRaw(
		requestParameters: PortfoliosApiFindPropertiesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PaginatedPropertyDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling findProperties.',
			);
		}

		const queryParameters: any = {};

		if (requestParameters.page !== undefined) {
			queryParameters['page'] = requestParameters.page;
		}

		if (requestParameters.skip !== undefined) {
			queryParameters['skip'] = requestParameters.skip;
		}

		if (requestParameters.take !== undefined) {
			queryParameters['take'] = requestParameters.take;
		}

		if (requestParameters.sort) {
			queryParameters['sort'] = requestParameters.sort;
		}

		if (requestParameters.filter !== undefined) {
			queryParameters['filter'] = requestParameters.filter;
		}

		if (requestParameters.filterCustom !== undefined) {
			queryParameters['filterCustom'] = requestParameters.filterCustom;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/portfolios/{id}/properties`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 */
	async findProperties(
		requestParameters: PortfoliosApiFindPropertiesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PaginatedPropertyDto> {
		const response = await this.findPropertiesRaw(
			requestParameters,
			initOverrides,
		);
		return await response.value();
	}

	/**
	 */
	async findRolesRaw(
		requestParameters: PortfoliosApiFindRolesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PaginatedRoleDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling findRoles.',
			);
		}

		const queryParameters: any = {};

		if (requestParameters.page !== undefined) {
			queryParameters['page'] = requestParameters.page;
		}

		if (requestParameters.skip !== undefined) {
			queryParameters['skip'] = requestParameters.skip;
		}

		if (requestParameters.take !== undefined) {
			queryParameters['take'] = requestParameters.take;
		}

		if (requestParameters.sort) {
			queryParameters['sort'] = requestParameters.sort;
		}

		if (requestParameters.filter !== undefined) {
			queryParameters['filter'] = requestParameters.filter;
		}

		if (requestParameters.filterCustom !== undefined) {
			queryParameters['filterCustom'] = requestParameters.filterCustom;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/portfolios/{id}/roles`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 */
	async findRoles(
		requestParameters: PortfoliosApiFindRolesRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PaginatedRoleDto> {
		const response = await this.findRolesRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async findUnitsRaw(
		requestParameters: PortfoliosApiFindUnitsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PaginatedUnitDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling findUnits.',
			);
		}

		const queryParameters: any = {};

		if (requestParameters.page !== undefined) {
			queryParameters['page'] = requestParameters.page;
		}

		if (requestParameters.skip !== undefined) {
			queryParameters['skip'] = requestParameters.skip;
		}

		if (requestParameters.take !== undefined) {
			queryParameters['take'] = requestParameters.take;
		}

		if (requestParameters.sort) {
			queryParameters['sort'] = requestParameters.sort;
		}

		if (requestParameters.filter !== undefined) {
			queryParameters['filter'] = requestParameters.filter;
		}

		if (requestParameters.filterCustom !== undefined) {
			queryParameters['filterCustom'] = requestParameters.filterCustom;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/portfolios/{id}/units`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 */
	async findUnits(
		requestParameters: PortfoliosApiFindUnitsRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PaginatedUnitDto> {
		const response = await this.findUnitsRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async findUnitsMinimalRaw(
		requestParameters: PortfoliosApiFindUnitsMinimalRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PaginatedUnitMinimalDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling findUnitsMinimal.',
			);
		}

		const queryParameters: any = {};

		if (requestParameters.page !== undefined) {
			queryParameters['page'] = requestParameters.page;
		}

		if (requestParameters.skip !== undefined) {
			queryParameters['skip'] = requestParameters.skip;
		}

		if (requestParameters.take !== undefined) {
			queryParameters['take'] = requestParameters.take;
		}

		if (requestParameters.sort) {
			queryParameters['sort'] = requestParameters.sort;
		}

		if (requestParameters.filter !== undefined) {
			queryParameters['filter'] = requestParameters.filter;
		}

		if (requestParameters.filterCustom !== undefined) {
			queryParameters['filterCustom'] = requestParameters.filterCustom;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/portfolios/{id}/units-minimal`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 */
	async findUnitsMinimal(
		requestParameters: PortfoliosApiFindUnitsMinimalRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PaginatedUnitMinimalDto> {
		const response = await this.findUnitsMinimalRaw(
			requestParameters,
			initOverrides,
		);
		return await response.value();
	}

	/**
	 */
	async getBalanceRaw(
		requestParameters: PortfoliosApiGetBalanceRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<BalanceDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling getBalance.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/portfolios/{id}/balance`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 */
	async getBalance(
		requestParameters: PortfoliosApiGetBalanceRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<BalanceDto> {
		const response = await this.getBalanceRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async getExpensesByCategoryRaw(
		requestParameters: PortfoliosApiGetExpensesByCategoryRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<Array<GroupByCategoryDto>>> {
		if (
			requestParameters.organizationId === null ||
			requestParameters.organizationId === undefined
		) {
			throw new runtime.RequiredError(
				'organizationId',
				'Required parameter requestParameters.organizationId was null or undefined when calling getExpensesByCategory.',
			);
		}

		if (
			requestParameters.portfolioId === null ||
			requestParameters.portfolioId === undefined
		) {
			throw new runtime.RequiredError(
				'portfolioId',
				'Required parameter requestParameters.portfolioId was null or undefined when calling getExpensesByCategory.',
			);
		}

		const queryParameters: any = {};

		if (requestParameters.start !== undefined) {
			queryParameters['start'] = requestParameters.start;
		}

		if (requestParameters.end !== undefined) {
			queryParameters['end'] = requestParameters.end;
		}

		if (requestParameters.propertyId !== undefined) {
			queryParameters['propertyId'] = requestParameters.propertyId;
		}

		if (requestParameters.unitId !== undefined) {
			queryParameters['unitId'] = requestParameters.unitId;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/organizations/{organizationId}/portfolios/{portfolioId}/aggregate/expenses-by-category`
					.replace(
						`{${'organizationId'}}`,
						encodeURIComponent(String(requestParameters.organizationId)),
					)
					.replace(
						`{${'portfolioId'}}`,
						encodeURIComponent(String(requestParameters.portfolioId)),
					),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 */
	async getExpensesByCategory(
		requestParameters: PortfoliosApiGetExpensesByCategoryRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<Array<GroupByCategoryDto>> {
		const response = await this.getExpensesByCategoryRaw(
			requestParameters,
			initOverrides,
		);
		return await response.value();
	}

	/**
	 */
	async getExpensesByLocationRaw(
		requestParameters: PortfoliosApiGetExpensesByLocationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<Array<GroupByLocationDto>>> {
		if (
			requestParameters.organizationId === null ||
			requestParameters.organizationId === undefined
		) {
			throw new runtime.RequiredError(
				'organizationId',
				'Required parameter requestParameters.organizationId was null or undefined when calling getExpensesByLocation.',
			);
		}

		if (
			requestParameters.portfolioId === null ||
			requestParameters.portfolioId === undefined
		) {
			throw new runtime.RequiredError(
				'portfolioId',
				'Required parameter requestParameters.portfolioId was null or undefined when calling getExpensesByLocation.',
			);
		}

		const queryParameters: any = {};

		if (requestParameters.start !== undefined) {
			queryParameters['start'] = requestParameters.start;
		}

		if (requestParameters.end !== undefined) {
			queryParameters['end'] = requestParameters.end;
		}

		if (requestParameters.propertyId !== undefined) {
			queryParameters['propertyId'] = requestParameters.propertyId;
		}

		if (requestParameters.unitId !== undefined) {
			queryParameters['unitId'] = requestParameters.unitId;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/organizations/{organizationId}/portfolios/{portfolioId}/aggregate/expenses-by-location`
					.replace(
						`{${'organizationId'}}`,
						encodeURIComponent(String(requestParameters.organizationId)),
					)
					.replace(
						`{${'portfolioId'}}`,
						encodeURIComponent(String(requestParameters.portfolioId)),
					),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 */
	async getExpensesByLocation(
		requestParameters: PortfoliosApiGetExpensesByLocationRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<Array<GroupByLocationDto>> {
		const response = await this.getExpensesByLocationRaw(
			requestParameters,
			initOverrides,
		);
		return await response.value();
	}

	/**
	 */
	async getExpensesByMonthRaw(
		requestParameters: PortfoliosApiGetExpensesByMonthRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<Array<GroupByMonthDto>>> {
		if (
			requestParameters.organizationId === null ||
			requestParameters.organizationId === undefined
		) {
			throw new runtime.RequiredError(
				'organizationId',
				'Required parameter requestParameters.organizationId was null or undefined when calling getExpensesByMonth.',
			);
		}

		if (
			requestParameters.portfolioId === null ||
			requestParameters.portfolioId === undefined
		) {
			throw new runtime.RequiredError(
				'portfolioId',
				'Required parameter requestParameters.portfolioId was null or undefined when calling getExpensesByMonth.',
			);
		}

		const queryParameters: any = {};

		if (requestParameters.start !== undefined) {
			queryParameters['start'] = requestParameters.start;
		}

		if (requestParameters.end !== undefined) {
			queryParameters['end'] = requestParameters.end;
		}

		if (requestParameters.propertyId !== undefined) {
			queryParameters['propertyId'] = requestParameters.propertyId;
		}

		if (requestParameters.unitId !== undefined) {
			queryParameters['unitId'] = requestParameters.unitId;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/organizations/{organizationId}/portfolios/{portfolioId}/aggregate/expenses`
					.replace(
						`{${'organizationId'}}`,
						encodeURIComponent(String(requestParameters.organizationId)),
					)
					.replace(
						`{${'portfolioId'}}`,
						encodeURIComponent(String(requestParameters.portfolioId)),
					),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 */
	async getExpensesByMonth(
		requestParameters: PortfoliosApiGetExpensesByMonthRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<Array<GroupByMonthDto>> {
		const response = await this.getExpensesByMonthRaw(
			requestParameters,
			initOverrides,
		);
		return await response.value();
	}

	/**
	 */
	async getOccupancyRaw(
		requestParameters: PortfoliosApiGetOccupancyRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<Array<Occupancy>>> {
		if (
			requestParameters.organizationId === null ||
			requestParameters.organizationId === undefined
		) {
			throw new runtime.RequiredError(
				'organizationId',
				'Required parameter requestParameters.organizationId was null or undefined when calling getOccupancy.',
			);
		}

		if (
			requestParameters.portfolioId === null ||
			requestParameters.portfolioId === undefined
		) {
			throw new runtime.RequiredError(
				'portfolioId',
				'Required parameter requestParameters.portfolioId was null or undefined when calling getOccupancy.',
			);
		}

		const queryParameters: any = {};

		if (requestParameters.start !== undefined) {
			queryParameters['start'] = requestParameters.start;
		}

		if (requestParameters.end !== undefined) {
			queryParameters['end'] = requestParameters.end;
		}

		if (requestParameters.rangeKind !== undefined) {
			queryParameters['rangeKind'] = requestParameters.rangeKind;
		}

		if (requestParameters.propertyId !== undefined) {
			queryParameters['propertyId'] = requestParameters.propertyId;
		}

		if (requestParameters.unitId !== undefined) {
			queryParameters['unitId'] = requestParameters.unitId;
		}

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/organizations/{organizationId}/portfolios/{portfolioId}/aggregate/occupancy`
					.replace(
						`{${'organizationId'}}`,
						encodeURIComponent(String(requestParameters.organizationId)),
					)
					.replace(
						`{${'portfolioId'}}`,
						encodeURIComponent(String(requestParameters.portfolioId)),
					),
				method: 'GET',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 */
	async getOccupancy(
		requestParameters: PortfoliosApiGetOccupancyRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<Array<Occupancy>> {
		const response = await this.getOccupancyRaw(
			requestParameters,
			initOverrides,
		);
		return await response.value();
	}

	/**
	 */
	async removeRaw(
		requestParameters: PortfoliosApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PortfolioDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling remove.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/portfolios/{id}`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 */
	async remove(
		requestParameters: PortfoliosApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PortfolioDto> {
		const response = await this.removeRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 */
	async updateRaw(
		requestParameters: PortfoliosApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<PortfolioDto>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling update.',
			);
		}

		if (
			requestParameters.updatePortfolioDto === null ||
			requestParameters.updatePortfolioDto === undefined
		) {
			throw new runtime.RequiredError(
				'updatePortfolioDto',
				'Required parameter requestParameters.updatePortfolioDto was null or undefined when calling update.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request(
			{
				path: `/portfolios/{id}`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'PATCH',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.updatePortfolioDto,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 */
	async update(
		requestParameters: PortfoliosApiUpdateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<PortfolioDto> {
		const response = await this.updateRaw(requestParameters, initOverrides);
		return await response.value();
	}
}
