/* tslint:disable */
/* eslint-disable */
/**
 * Aqaratech
 * Aqaratech API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';

export interface SearchApiReindexAllRequest {
	xRoleId?: string;
}

export interface SearchApiRemoveRequest {
	xRoleId?: string;
}

/**
 * SearchApi - interface
 *
 * @export
 * @interface SearchApiInterface
 */
export interface SearchApiInterface {
	/**
	 *
	 * @summary
	 * @param {string} [xRoleId]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof SearchApiInterface
	 */
	reindexAllRaw(
		requestParameters: SearchApiReindexAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<void>>;

	/**
	 *
	 *
	 */
	reindexAll(
		requestParameters: SearchApiReindexAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<void>;

	/**
	 *
	 * @summary
	 * @param {string} [xRoleId]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof SearchApiInterface
	 */
	removeRaw(
		requestParameters: SearchApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<Array<object>>>;

	/**
	 *
	 *
	 */
	remove(
		requestParameters: SearchApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<Array<object>>;
}

/**
 *
 */
export class SearchApi extends runtime.BaseAPI implements SearchApiInterface {
	/**
	 *
	 *
	 */
	async reindexAllRaw(
		requestParameters: SearchApiReindexAllRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<void>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xRoleId !== undefined &&
			requestParameters.xRoleId !== null
		) {
			headerParameters['x-role-id'] = String(requestParameters.xRoleId);
		}

		const response = await this.request(
			{
				path: `/search`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async reindexAll(
		requestParameters: SearchApiReindexAllRequest = {},
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<void> {
		await this.reindexAllRaw(requestParameters, initOverrides);
	}

	/**
	 *
	 *
	 */
	async removeRaw(
		requestParameters: SearchApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<Array<object>>> {
		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		if (
			requestParameters.xRoleId !== undefined &&
			requestParameters.xRoleId !== null
		) {
			headerParameters['x-role-id'] = String(requestParameters.xRoleId);
		}

		const response = await this.request(
			{
				path: `/search`,
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse<any>(response);
	}

	/**
	 *
	 *
	 */
	async remove(
		requestParameters: SearchApiRemoveRequest = {},
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<Array<object>> {
		const response = await this.removeRaw(requestParameters, initOverrides);
		return await response.value();
	}
}
