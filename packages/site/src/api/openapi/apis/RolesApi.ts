/* tslint:disable */
/* eslint-disable */
/**
 * Aqaratech
 * Aqaratech API
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { CreateRoleDto, UserDto } from '../models';

export interface RolesApiCreateRequest {
	createRoleDto: CreateRoleDto;
}

export interface RolesApiRemoveRequest {
	id: string;
}

export interface RolesApiSendInviteRequest {
	id: string;
}

/**
 * RolesApi - interface
 *
 * @export
 * @interface RolesApiInterface
 */
export interface RolesApiInterface {
	/**
	 *
	 * @summary
	 * @param {CreateRoleDto} createRoleDto
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof RolesApiInterface
	 */
	createRaw(
		requestParameters: RolesApiCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<UserDto>>;

	/**
	 *
	 *
	 */
	create(
		requestParameters: RolesApiCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<UserDto>;

	/**
	 *
	 * @summary
	 * @param {string} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof RolesApiInterface
	 */
	removeRaw(
		requestParameters: RolesApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>>;

	/**
	 *
	 *
	 */
	remove(
		requestParameters: RolesApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string>;

	/**
	 *
	 * @summary
	 * @param {string} id
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof RolesApiInterface
	 */
	sendInviteRaw(
		requestParameters: RolesApiSendInviteRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<void>>;

	/**
	 *
	 *
	 */
	sendInvite(
		requestParameters: RolesApiSendInviteRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<void>;
}

/**
 *
 */
export class RolesApi extends runtime.BaseAPI implements RolesApiInterface {
	/**
	 *
	 *
	 */
	async createRaw(
		requestParameters: RolesApiCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<UserDto>> {
		if (
			requestParameters.createRoleDto === null ||
			requestParameters.createRoleDto === undefined
		) {
			throw new runtime.RequiredError(
				'createRoleDto',
				'Required parameter requestParameters.createRoleDto was null or undefined when calling create.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		headerParameters['Content-Type'] = 'application/json';

		const response = await this.request(
			{
				path: `/roles`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.createRoleDto,
			},
			initOverrides,
		);

		return new runtime.JSONApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async create(
		requestParameters: RolesApiCreateRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<UserDto> {
		const response = await this.createRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async removeRaw(
		requestParameters: RolesApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<string>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling remove.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/roles/{id}`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'DELETE',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.TextApiResponse(response) as any;
	}

	/**
	 *
	 *
	 */
	async remove(
		requestParameters: RolesApiRemoveRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<string> {
		const response = await this.removeRaw(requestParameters, initOverrides);
		return await response.value();
	}

	/**
	 *
	 *
	 */
	async sendInviteRaw(
		requestParameters: RolesApiSendInviteRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<runtime.ApiResponse<void>> {
		if (requestParameters.id === null || requestParameters.id === undefined) {
			throw new runtime.RequiredError(
				'id',
				'Required parameter requestParameters.id was null or undefined when calling sendInvite.',
			);
		}

		const queryParameters: any = {};

		const headerParameters: runtime.HTTPHeaders = {};

		const response = await this.request(
			{
				path: `/roles/{id}/send-invite`.replace(
					`{${'id'}}`,
					encodeURIComponent(String(requestParameters.id)),
				),
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
			},
			initOverrides,
		);

		return new runtime.VoidApiResponse(response);
	}

	/**
	 *
	 *
	 */
	async sendInvite(
		requestParameters: RolesApiSendInviteRequest,
		initOverrides?: RequestInit | runtime.InitOverrideFunction,
	): Promise<void> {
		await this.sendInviteRaw(requestParameters, initOverrides);
	}
}
