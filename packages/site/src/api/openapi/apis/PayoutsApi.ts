/* tslint:disable */
/* eslint-disable */
/**
 * Aqaratech API
 * The Aqratech API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CombinedEnum,
  CreatePayoutDto,
  PaginatedPayoutDto,
  PayoutDto,
  SortOrderEnum,
  UpdatePayoutDto,
} from '../models';

export interface PayoutsApiCreateRequest {
    createPayoutDto: CreatePayoutDto;
    xRoleId?: string;
}

export interface PayoutsApiFindAllRequest {
    xRoleId?: string;
    page?: number;
    take?: number;
    orderBy?: CombinedEnum;
    sortOrder?: SortOrderEnum;
    filter?: object;
}

export interface PayoutsApiFindOneRequest {
    id: string;
    xRoleId?: string;
}

export interface PayoutsApiRemoveRequest {
    id: string;
    xRoleId?: string;
}

export interface PayoutsApiUpdateRequest {
    id: string;
    updatePayoutDto: UpdatePayoutDto;
    xRoleId?: string;
}

/**
 * PayoutsApi - interface
 * 
 * @export
 * @interface PayoutsApiInterface
 */
export interface PayoutsApiInterface {
    /**
     * 
     * @summary 
     * @param {CreatePayoutDto} createPayoutDto 
     * @param {string} [xRoleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutsApiInterface
     */
    createRaw(requestParameters: PayoutsApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayoutDto>>;

    /**
     * 
     * 
     */
    create(requestParameters: PayoutsApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayoutDto>;

    /**
     * 
     * @summary 
     * @param {string} [xRoleId] 
     * @param {number} [page] 
     * @param {number} [take] 
     * @param {CombinedEnum} [orderBy] 
     * @param {SortOrderEnum} [sortOrder] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutsApiInterface
     */
    findAllRaw(requestParameters: PayoutsApiFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPayoutDto>>;

    /**
     * 
     * 
     */
    findAll(requestParameters: PayoutsApiFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPayoutDto>;

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {string} [xRoleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutsApiInterface
     */
    findOneRaw(requestParameters: PayoutsApiFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayoutDto>>;

    /**
     * 
     * 
     */
    findOne(requestParameters: PayoutsApiFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayoutDto>;

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {string} [xRoleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutsApiInterface
     */
    removeRaw(requestParameters: PayoutsApiRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>>;

    /**
     * 
     * 
     */
    remove(requestParameters: PayoutsApiRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string>;

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {UpdatePayoutDto} updatePayoutDto 
     * @param {string} [xRoleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PayoutsApiInterface
     */
    updateRaw(requestParameters: PayoutsApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayoutDto>>;

    /**
     * 
     * 
     */
    update(requestParameters: PayoutsApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayoutDto>;

}

/**
 * 
 */
export class PayoutsApi extends runtime.BaseAPI implements PayoutsApiInterface {

    /**
     * 
     * 
     */
    async createRaw(requestParameters: PayoutsApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayoutDto>> {
        if (requestParameters.createPayoutDto === null || requestParameters.createPayoutDto === undefined) {
            throw new runtime.RequiredError('createPayoutDto','Required parameter requestParameters.createPayoutDto was null or undefined when calling create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/payouts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createPayoutDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * 
     */
    async create(requestParameters: PayoutsApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayoutDto> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 
     */
    async findAllRaw(requestParameters: PayoutsApiFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPayoutDto>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/payouts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * 
     */
    async findAll(requestParameters: PayoutsApiFindAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPayoutDto> {
        const response = await this.findAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 
     */
    async findOneRaw(requestParameters: PayoutsApiFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayoutDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/payouts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * 
     */
    async findOne(requestParameters: PayoutsApiFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayoutDto> {
        const response = await this.findOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 
     */
    async removeRaw(requestParameters: PayoutsApiRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling remove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/payouts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * 
     * 
     */
    async remove(requestParameters: PayoutsApiRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.removeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 
     */
    async updateRaw(requestParameters: PayoutsApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PayoutDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling update.');
        }

        if (requestParameters.updatePayoutDto === null || requestParameters.updatePayoutDto === undefined) {
            throw new runtime.RequiredError('updatePayoutDto','Required parameter requestParameters.updatePayoutDto was null or undefined when calling update.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/payouts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updatePayoutDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * 
     */
    async update(requestParameters: PayoutsApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PayoutDto> {
        const response = await this.updateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
