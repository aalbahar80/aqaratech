/* tslint:disable */
/* eslint-disable */
/**
 * Aqaratech API
 * The Aqratech API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BalanceDto,
  CombinedEnum,
  CreatePortfolioDto,
  PaginatedPayoutDto,
  PaginatedPortfolioDto,
  PaginatedPropertyDto,
  PaginatedRoleDto,
  PaginatedUnitDto,
  PortfolioDto,
  SortOrderEnum,
  UpdatePortfolioDto,
} from '../models';

export interface PortfoliosApiCreateRequest {
    createPortfolioDto: CreatePortfolioDto;
    xRoleId?: string;
}

export interface PortfoliosApiFindAllRequest {
    xRoleId?: string;
    page?: number;
    take?: number;
    orderBy?: CombinedEnum;
    sortOrder?: SortOrderEnum;
    filter?: object;
}

export interface PortfoliosApiFindOneRequest {
    id: string;
    xRoleId?: string;
}

export interface PortfoliosApiFindPayoutsRequest {
    id: string;
    xRoleId?: string;
    page?: number;
    take?: number;
    orderBy?: CombinedEnum;
    sortOrder?: SortOrderEnum;
    filter?: object;
}

export interface PortfoliosApiFindPropertiesRequest {
    id: string;
    xRoleId?: string;
    page?: number;
    take?: number;
    orderBy?: CombinedEnum;
    sortOrder?: SortOrderEnum;
    filter?: object;
}

export interface PortfoliosApiFindRolesRequest {
    id: string;
    xRoleId?: string;
    page?: number;
    take?: number;
    orderBy?: CombinedEnum;
    sortOrder?: SortOrderEnum;
    filter?: object;
}

export interface PortfoliosApiFindUnitsRequest {
    id: string;
    xRoleId?: string;
    page?: number;
    take?: number;
    orderBy?: CombinedEnum;
    sortOrder?: SortOrderEnum;
    filter?: object;
}

export interface PortfoliosApiGetBalanceRequest {
    id: string;
    xRoleId?: string;
}

export interface PortfoliosApiRemoveRequest {
    id: string;
    xRoleId?: string;
}

export interface PortfoliosApiUpdateRequest {
    id: string;
    updatePortfolioDto: UpdatePortfolioDto;
    xRoleId?: string;
}

/**
 * PortfoliosApi - interface
 * 
 * @export
 * @interface PortfoliosApiInterface
 */
export interface PortfoliosApiInterface {
    /**
     * 
     * @summary 
     * @param {CreatePortfolioDto} createPortfolioDto 
     * @param {string} [xRoleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiInterface
     */
    createRaw(requestParameters: PortfoliosApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioDto>>;

    /**
     * 
     * 
     */
    create(requestParameters: PortfoliosApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioDto>;

    /**
     * 
     * @summary 
     * @param {string} [xRoleId] 
     * @param {number} [page] 
     * @param {number} [take] 
     * @param {CombinedEnum} [orderBy] 
     * @param {SortOrderEnum} [sortOrder] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiInterface
     */
    findAllRaw(requestParameters: PortfoliosApiFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPortfolioDto>>;

    /**
     * 
     * 
     */
    findAll(requestParameters: PortfoliosApiFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPortfolioDto>;

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {string} [xRoleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiInterface
     */
    findOneRaw(requestParameters: PortfoliosApiFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioDto>>;

    /**
     * 
     * 
     */
    findOne(requestParameters: PortfoliosApiFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioDto>;

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {string} [xRoleId] 
     * @param {number} [page] 
     * @param {number} [take] 
     * @param {CombinedEnum} [orderBy] 
     * @param {SortOrderEnum} [sortOrder] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiInterface
     */
    findPayoutsRaw(requestParameters: PortfoliosApiFindPayoutsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPayoutDto>>;

    /**
     * 
     * 
     */
    findPayouts(requestParameters: PortfoliosApiFindPayoutsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPayoutDto>;

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {string} [xRoleId] 
     * @param {number} [page] 
     * @param {number} [take] 
     * @param {CombinedEnum} [orderBy] 
     * @param {SortOrderEnum} [sortOrder] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiInterface
     */
    findPropertiesRaw(requestParameters: PortfoliosApiFindPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPropertyDto>>;

    /**
     * 
     * 
     */
    findProperties(requestParameters: PortfoliosApiFindPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPropertyDto>;

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {string} [xRoleId] 
     * @param {number} [page] 
     * @param {number} [take] 
     * @param {CombinedEnum} [orderBy] 
     * @param {SortOrderEnum} [sortOrder] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiInterface
     */
    findRolesRaw(requestParameters: PortfoliosApiFindRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRoleDto>>;

    /**
     * 
     * 
     */
    findRoles(requestParameters: PortfoliosApiFindRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRoleDto>;

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {string} [xRoleId] 
     * @param {number} [page] 
     * @param {number} [take] 
     * @param {CombinedEnum} [orderBy] 
     * @param {SortOrderEnum} [sortOrder] 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiInterface
     */
    findUnitsRaw(requestParameters: PortfoliosApiFindUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUnitDto>>;

    /**
     * 
     * 
     */
    findUnits(requestParameters: PortfoliosApiFindUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUnitDto>;

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {string} [xRoleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiInterface
     */
    getBalanceRaw(requestParameters: PortfoliosApiGetBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BalanceDto>>;

    /**
     * 
     * 
     */
    getBalance(requestParameters: PortfoliosApiGetBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BalanceDto>;

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {string} [xRoleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiInterface
     */
    removeRaw(requestParameters: PortfoliosApiRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioDto>>;

    /**
     * 
     * 
     */
    remove(requestParameters: PortfoliosApiRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioDto>;

    /**
     * 
     * @summary 
     * @param {string} id 
     * @param {UpdatePortfolioDto} updatePortfolioDto 
     * @param {string} [xRoleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiInterface
     */
    updateRaw(requestParameters: PortfoliosApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioDto>>;

    /**
     * 
     * 
     */
    update(requestParameters: PortfoliosApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioDto>;

}

/**
 * 
 */
export class PortfoliosApi extends runtime.BaseAPI implements PortfoliosApiInterface {

    /**
     * 
     * 
     */
    async createRaw(requestParameters: PortfoliosApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioDto>> {
        if (requestParameters.createPortfolioDto === null || requestParameters.createPortfolioDto === undefined) {
            throw new runtime.RequiredError('createPortfolioDto','Required parameter requestParameters.createPortfolioDto was null or undefined when calling create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/portfolios`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createPortfolioDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * 
     */
    async create(requestParameters: PortfoliosApiCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioDto> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 
     */
    async findAllRaw(requestParameters: PortfoliosApiFindAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPortfolioDto>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/portfolios`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * 
     */
    async findAll(requestParameters: PortfoliosApiFindAllRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPortfolioDto> {
        const response = await this.findAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 
     */
    async findOneRaw(requestParameters: PortfoliosApiFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOne.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/portfolios/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * 
     */
    async findOne(requestParameters: PortfoliosApiFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioDto> {
        const response = await this.findOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 
     */
    async findPayoutsRaw(requestParameters: PortfoliosApiFindPayoutsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPayoutDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findPayouts.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/portfolios/{id}/payouts`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * 
     */
    async findPayouts(requestParameters: PortfoliosApiFindPayoutsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPayoutDto> {
        const response = await this.findPayoutsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 
     */
    async findPropertiesRaw(requestParameters: PortfoliosApiFindPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPropertyDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findProperties.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/portfolios/{id}/properties`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * 
     */
    async findProperties(requestParameters: PortfoliosApiFindPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPropertyDto> {
        const response = await this.findPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 
     */
    async findRolesRaw(requestParameters: PortfoliosApiFindRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRoleDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findRoles.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/portfolios/{id}/roles`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * 
     */
    async findRoles(requestParameters: PortfoliosApiFindRolesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRoleDto> {
        const response = await this.findRolesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 
     */
    async findUnitsRaw(requestParameters: PortfoliosApiFindUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUnitDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findUnits.');
        }

        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['sortOrder'] = requestParameters.sortOrder;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/portfolios/{id}/units`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * 
     */
    async findUnits(requestParameters: PortfoliosApiFindUnitsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUnitDto> {
        const response = await this.findUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 
     */
    async getBalanceRaw(requestParameters: PortfoliosApiGetBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BalanceDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBalance.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/portfolios/{id}/balance`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * 
     */
    async getBalance(requestParameters: PortfoliosApiGetBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BalanceDto> {
        const response = await this.getBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 
     */
    async removeRaw(requestParameters: PortfoliosApiRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling remove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/portfolios/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * 
     */
    async remove(requestParameters: PortfoliosApiRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioDto> {
        const response = await this.removeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     * 
     */
    async updateRaw(requestParameters: PortfoliosApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PortfolioDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling update.');
        }

        if (requestParameters.updatePortfolioDto === null || requestParameters.updatePortfolioDto === undefined) {
            throw new runtime.RequiredError('updatePortfolioDto','Required parameter requestParameters.updatePortfolioDto was null or undefined when calling update.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/portfolios/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.updatePortfolioDto,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * 
     * 
     */
    async update(requestParameters: PortfoliosApiUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PortfolioDto> {
        const response = await this.updateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
