generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Client {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deactivated       Boolean?           @default(false)
  firstName         String
  secondName        String?
  thirdName         String?
  lastName          String
  civilid           String?
  phone             String?
  email             String?
  dob               DateTime?
  expenses          Expense[]
  maintenanceOrders MaintenanceOrder[]
  properties        Property[]
}

model Expense {
  id                 String            @id @default(uuid())
  unitId             String?
  propertyId         String?
  clientId           String?
  maintenanceOrderId String?
  categoryId         Int?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  amount             Float
  postAt             DateTime
  memo               String?           @db.Text
  client             Client?           @relation(fields: [clientId], references: [id], onDelete: Restrict)
  maintenanceOrder   MaintenanceOrder? @relation(fields: [maintenanceOrderId], references: [id], onDelete: Restrict)
  property           Property?         @relation(fields: [propertyId], references: [id], onDelete: Restrict)
  unit               Unit?             @relation(fields: [unitId], references: [id], onDelete: Restrict)
  category           ExpenseCategory?  @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  @@index([unitId])
  @@index([propertyId])
  @@index([clientId])
  @@index([maintenanceOrderId])
  @@index([categoryId])
}

model ExpenseCategory {
  id       Int           @id @default(autoincrement())
  groupId  Int
  en       String        @unique
  ar       String        @unique
  group    ExpenseGroup? @relation(fields: [groupId], references: [id], onDelete: Restrict)
  expenses Expense[]

  @@index([groupId])
}

model ExpenseGroup {
  id         Int               @id @default(autoincrement())
  en         String            @unique
  ar         String            @unique
  categories ExpenseCategory[]
}

model Lease {
  id           String        @id @default(uuid())
  tenantId     String
  unitId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  start        DateTime
  end          DateTime
  monthlyRent  Float
  deposit      Float         @default(0)
  deactivated  Boolean       @default(false)
  notify       Boolean       @default(true)
  license      String?
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Restrict)
  unit         Unit          @relation(fields: [unitId], references: [id], onDelete: Restrict)
  transactions Transaction[]

  @@index([tenantId])
  @@index([unitId])
}

model MaintenanceOrder {
  id          String    @id @default(uuid())
  tenantId    String?
  unitId      String?
  propertyId  String?
  clientId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
  title       String?
  description String?   @db.Text
  status      String?
  client      Client?   @relation(fields: [clientId], references: [id], onDelete: Restrict)
  property    Property? @relation(fields: [propertyId], references: [id], onDelete: Restrict)
  tenant      Tenant?   @relation(fields: [tenantId], references: [id], onDelete: Restrict)
  unit        Unit?     @relation(fields: [unitId], references: [id], onDelete: Restrict)
  expenses    Expense[]

  @@index([tenantId])
  @@index([unitId])
  @@index([propertyId])
  @@index([clientId])
}

model Property {
  id                String             @id @default(uuid())
  clientId          String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  area              String?
  block             String?
  avenue            String?
  street            String?
  number            String?
  cost              Float?
  long              Float?
  lat               Float?
  client            Client             @relation(fields: [clientId], references: [id], onDelete: Restrict)
  expenses          Expense[]
  maintenanceOrders MaintenanceOrder[]
  units             Unit[]

  @@index([clientId])
}

model Tenant {
  id                String             @id @default(uuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  firstName         String
  secondName        String?
  thirdName         String?
  lastName          String
  civilid           String?
  dob               DateTime?
  phone             String?
  email             String?
  passportNum       String?
  nationality       String?
  residencyNum      String?
  residencyEnd      DateTime?
  contactMethod     String?
  leases            Lease[]
  maintenanceOrders MaintenanceOrder[]
}

model Transaction {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dueAt       DateTime?
  postAt      DateTime
  paidAt      DateTime?
  isPaid      Boolean   @default(false)
  amount      Float
  memo        String?   @db.Text
  mfPaymentId String?
  leaseId     String
  reminderAt  DateTime?
  lease       Lease     @relation(fields: [leaseId], references: [id], onDelete: Restrict)

  @@index([leaseId])
}

model Unit {
  id                String             @id @default(uuid())
  propertyId        String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  unitNumber        String
  floor             Float?
  size              Float?
  bed               Float?
  bath              Float?
  marketRent        Float?
  type              String?
  usage             String?
  property          Property           @relation(fields: [propertyId], references: [id], onDelete: Restrict)
  expenses          Expense[]
  leases            Lease[]
  maintenanceOrders MaintenanceOrder[]

  @@index([propertyId])
}
