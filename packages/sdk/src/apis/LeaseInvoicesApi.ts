/* tslint:disable */
/* eslint-disable */
/**
 * Aqaratech API
 * The Aqratech API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LeaseInvoiceDto,
    LeaseInvoiceDtoFromJSON,
    LeaseInvoiceDtoToJSON,
    PaginatedResponseOfLeaseInvoiceDto,
    PaginatedResponseOfLeaseInvoiceDtoFromJSON,
    PaginatedResponseOfLeaseInvoiceDtoToJSON,
    UpdateLeaseInvoiceDto,
    UpdateLeaseInvoiceDtoFromJSON,
    UpdateLeaseInvoiceDtoToJSON,
} from '../models';

export interface CreateLeaseInvoicesRequest {
    leaseInvoiceDto: LeaseInvoiceDto;
    xRoleId?: string;
}

export interface FindAllLeaseInvoicesRequest {
    page?: number;
    take?: number;
    q?: string;
}

export interface FindOneLeaseInvoicesRequest {
    id: string;
}

export interface RemoveLeaseInvoicesRequest {
    id: string;
}

export interface UpdateLeaseInvoicesRequest {
    id: string;
    updateLeaseInvoiceDto: UpdateLeaseInvoiceDto;
}

/**
 * LeaseInvoicesApi - interface
 * 
 * @export
 * @interface LeaseInvoicesApiInterface
 */
export interface LeaseInvoicesApiInterface {
    /**
     * 
     * @param {LeaseInvoiceDto} leaseInvoiceDto 
     * @param {string} [xRoleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseInvoicesApiInterface
     */
    createLeaseInvoicesRaw(requestParameters: CreateLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LeaseInvoiceDto>>;

    /**
     */
    createLeaseInvoices(requestParameters: CreateLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LeaseInvoiceDto>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [take] 
     * @param {string} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseInvoicesApiInterface
     */
    findAllLeaseInvoicesRaw(requestParameters: FindAllLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfLeaseInvoiceDto>>;

    /**
     */
    findAllLeaseInvoices(requestParameters: FindAllLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedResponseOfLeaseInvoiceDto>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseInvoicesApiInterface
     */
    findOneLeaseInvoicesRaw(requestParameters: FindOneLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LeaseInvoiceDto>>;

    /**
     */
    findOneLeaseInvoices(requestParameters: FindOneLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LeaseInvoiceDto>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseInvoicesApiInterface
     */
    removeLeaseInvoicesRaw(requestParameters: RemoveLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LeaseInvoiceDto>>;

    /**
     */
    removeLeaseInvoices(requestParameters: RemoveLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LeaseInvoiceDto>;

    /**
     * 
     * @param {string} id 
     * @param {UpdateLeaseInvoiceDto} updateLeaseInvoiceDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeaseInvoicesApiInterface
     */
    updateLeaseInvoicesRaw(requestParameters: UpdateLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LeaseInvoiceDto>>;

    /**
     */
    updateLeaseInvoices(requestParameters: UpdateLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LeaseInvoiceDto>;

}

/**
 * 
 */
export class LeaseInvoicesApi extends runtime.BaseAPI implements LeaseInvoicesApiInterface {

    /**
     */
    async createLeaseInvoicesRaw(requestParameters: CreateLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LeaseInvoiceDto>> {
        if (requestParameters.leaseInvoiceDto === null || requestParameters.leaseInvoiceDto === undefined) {
            throw new runtime.RequiredError('leaseInvoiceDto','Required parameter requestParameters.leaseInvoiceDto was null or undefined when calling createLeaseInvoices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/leaseInvoices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LeaseInvoiceDtoToJSON(requestParameters.leaseInvoiceDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaseInvoiceDtoFromJSON(jsonValue));
    }

    /**
     */
    async createLeaseInvoices(requestParameters: CreateLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LeaseInvoiceDto> {
        const response = await this.createLeaseInvoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findAllLeaseInvoicesRaw(requestParameters: FindAllLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfLeaseInvoiceDto>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/leaseInvoices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseOfLeaseInvoiceDtoFromJSON(jsonValue));
    }

    /**
     */
    async findAllLeaseInvoices(requestParameters: FindAllLeaseInvoicesRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedResponseOfLeaseInvoiceDto> {
        const response = await this.findAllLeaseInvoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneLeaseInvoicesRaw(requestParameters: FindOneLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LeaseInvoiceDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneLeaseInvoices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/leaseInvoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaseInvoiceDtoFromJSON(jsonValue));
    }

    /**
     */
    async findOneLeaseInvoices(requestParameters: FindOneLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LeaseInvoiceDto> {
        const response = await this.findOneLeaseInvoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeLeaseInvoicesRaw(requestParameters: RemoveLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LeaseInvoiceDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeLeaseInvoices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/leaseInvoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaseInvoiceDtoFromJSON(jsonValue));
    }

    /**
     */
    async removeLeaseInvoices(requestParameters: RemoveLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LeaseInvoiceDto> {
        const response = await this.removeLeaseInvoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateLeaseInvoicesRaw(requestParameters: UpdateLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LeaseInvoiceDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLeaseInvoices.');
        }

        if (requestParameters.updateLeaseInvoiceDto === null || requestParameters.updateLeaseInvoiceDto === undefined) {
            throw new runtime.RequiredError('updateLeaseInvoiceDto','Required parameter requestParameters.updateLeaseInvoiceDto was null or undefined when calling updateLeaseInvoices.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/leaseInvoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLeaseInvoiceDtoToJSON(requestParameters.updateLeaseInvoiceDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaseInvoiceDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateLeaseInvoices(requestParameters: UpdateLeaseInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LeaseInvoiceDto> {
        const response = await this.updateLeaseInvoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
