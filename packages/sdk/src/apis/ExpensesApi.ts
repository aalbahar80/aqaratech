/* tslint:disable */
/* eslint-disable */
/**
 * Aqaratech API
 * The Aqratech API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ExpenseDto,
    ExpenseDtoFromJSON,
    ExpenseDtoToJSON,
    PaginatedResponseOfExpenseDto,
    PaginatedResponseOfExpenseDtoFromJSON,
    PaginatedResponseOfExpenseDtoToJSON,
    UpdateExpenseDto,
    UpdateExpenseDtoFromJSON,
    UpdateExpenseDtoToJSON,
} from '../models';

export interface CreateExpensesRequest {
    expenseDto: ExpenseDto;
    xRoleId?: string;
}

export interface FindAllExpensesRequest {
    page?: number;
    take?: number;
    q?: string;
}

export interface FindOneExpensesRequest {
    id: string;
}

export interface RemoveExpensesRequest {
    id: string;
}

export interface UpdateExpensesRequest {
    id: string;
    updateExpenseDto: UpdateExpenseDto;
}

/**
 * ExpensesApi - interface
 * 
 * @export
 * @interface ExpensesApiInterface
 */
export interface ExpensesApiInterface {
    /**
     * 
     * @param {ExpenseDto} expenseDto 
     * @param {string} [xRoleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiInterface
     */
    createExpensesRaw(requestParameters: CreateExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ExpenseDto>>;

    /**
     */
    createExpenses(requestParameters: CreateExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ExpenseDto>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [take] 
     * @param {string} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiInterface
     */
    findAllExpensesRaw(requestParameters: FindAllExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfExpenseDto>>;

    /**
     */
    findAllExpenses(requestParameters: FindAllExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedResponseOfExpenseDto>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiInterface
     */
    findOneExpensesRaw(requestParameters: FindOneExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ExpenseDto>>;

    /**
     */
    findOneExpenses(requestParameters: FindOneExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ExpenseDto>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiInterface
     */
    removeExpensesRaw(requestParameters: RemoveExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ExpenseDto>>;

    /**
     */
    removeExpenses(requestParameters: RemoveExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ExpenseDto>;

    /**
     * 
     * @param {string} id 
     * @param {UpdateExpenseDto} updateExpenseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpensesApiInterface
     */
    updateExpensesRaw(requestParameters: UpdateExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ExpenseDto>>;

    /**
     */
    updateExpenses(requestParameters: UpdateExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ExpenseDto>;

}

/**
 * 
 */
export class ExpensesApi extends runtime.BaseAPI implements ExpensesApiInterface {

    /**
     */
    async createExpensesRaw(requestParameters: CreateExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ExpenseDto>> {
        if (requestParameters.expenseDto === null || requestParameters.expenseDto === undefined) {
            throw new runtime.RequiredError('expenseDto','Required parameter requestParameters.expenseDto was null or undefined when calling createExpenses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/expenses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExpenseDtoToJSON(requestParameters.expenseDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseDtoFromJSON(jsonValue));
    }

    /**
     */
    async createExpenses(requestParameters: CreateExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ExpenseDto> {
        const response = await this.createExpensesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findAllExpensesRaw(requestParameters: FindAllExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfExpenseDto>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/expenses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseOfExpenseDtoFromJSON(jsonValue));
    }

    /**
     */
    async findAllExpenses(requestParameters: FindAllExpensesRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedResponseOfExpenseDto> {
        const response = await this.findAllExpensesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneExpensesRaw(requestParameters: FindOneExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ExpenseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneExpenses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/expenses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseDtoFromJSON(jsonValue));
    }

    /**
     */
    async findOneExpenses(requestParameters: FindOneExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ExpenseDto> {
        const response = await this.findOneExpensesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeExpensesRaw(requestParameters: RemoveExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ExpenseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeExpenses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/expenses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseDtoFromJSON(jsonValue));
    }

    /**
     */
    async removeExpenses(requestParameters: RemoveExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ExpenseDto> {
        const response = await this.removeExpensesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateExpensesRaw(requestParameters: UpdateExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ExpenseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateExpenses.');
        }

        if (requestParameters.updateExpenseDto === null || requestParameters.updateExpenseDto === undefined) {
            throw new runtime.RequiredError('updateExpenseDto','Required parameter requestParameters.updateExpenseDto was null or undefined when calling updateExpenses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/expenses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateExpenseDtoToJSON(requestParameters.updateExpenseDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpenseDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateExpenses(requestParameters: UpdateExpensesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ExpenseDto> {
        const response = await this.updateExpensesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
