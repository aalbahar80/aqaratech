/* tslint:disable */
/* eslint-disable */
/**
 * Aqaratech API
 * The Aqratech API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateUnitDto,
    CreateUnitDtoFromJSON,
    CreateUnitDtoToJSON,
    PaginatedResponseOfUnitVacancyDto,
    PaginatedResponseOfUnitVacancyDtoFromJSON,
    PaginatedResponseOfUnitVacancyDtoToJSON,
    UnitDto,
    UnitDtoFromJSON,
    UnitDtoToJSON,
    UnitOneDto,
    UnitOneDtoFromJSON,
    UnitOneDtoToJSON,
    UpdateUnitDto,
    UpdateUnitDtoFromJSON,
    UpdateUnitDtoToJSON,
} from '../models';

export interface CreateUnitsRequest {
    createUnitDto: CreateUnitDto;
    xRoleId?: string;
}

export interface FindAllUnitsRequest {
    page?: number;
    take?: number;
    q?: string;
}

export interface FindOneUnitsRequest {
    id: string;
}

export interface RemoveUnitsRequest {
    id: string;
}

export interface UpdateUnitsRequest {
    id: string;
    updateUnitDto: UpdateUnitDto;
}

/**
 * UnitsApi - interface
 * 
 * @export
 * @interface UnitsApiInterface
 */
export interface UnitsApiInterface {
    /**
     * 
     * @param {CreateUnitDto} createUnitDto 
     * @param {string} [xRoleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitsApiInterface
     */
    createUnitsRaw(requestParameters: CreateUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnitDto>>;

    /**
     */
    createUnits(requestParameters: CreateUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnitDto>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [take] 
     * @param {string} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitsApiInterface
     */
    findAllUnitsRaw(requestParameters: FindAllUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfUnitVacancyDto>>;

    /**
     */
    findAllUnits(requestParameters: FindAllUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedResponseOfUnitVacancyDto>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitsApiInterface
     */
    findOneUnitsRaw(requestParameters: FindOneUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnitOneDto>>;

    /**
     */
    findOneUnits(requestParameters: FindOneUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnitOneDto>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitsApiInterface
     */
    removeUnitsRaw(requestParameters: RemoveUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnitDto>>;

    /**
     */
    removeUnits(requestParameters: RemoveUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnitDto>;

    /**
     * 
     * @param {string} id 
     * @param {UpdateUnitDto} updateUnitDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnitsApiInterface
     */
    updateUnitsRaw(requestParameters: UpdateUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnitDto>>;

    /**
     */
    updateUnits(requestParameters: UpdateUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnitDto>;

}

/**
 * 
 */
export class UnitsApi extends runtime.BaseAPI implements UnitsApiInterface {

    /**
     */
    async createUnitsRaw(requestParameters: CreateUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnitDto>> {
        if (requestParameters.createUnitDto === null || requestParameters.createUnitDto === undefined) {
            throw new runtime.RequiredError('createUnitDto','Required parameter requestParameters.createUnitDto was null or undefined when calling createUnits.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/units`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUnitDtoToJSON(requestParameters.createUnitDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitDtoFromJSON(jsonValue));
    }

    /**
     */
    async createUnits(requestParameters: CreateUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnitDto> {
        const response = await this.createUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findAllUnitsRaw(requestParameters: FindAllUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfUnitVacancyDto>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/units`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseOfUnitVacancyDtoFromJSON(jsonValue));
    }

    /**
     */
    async findAllUnits(requestParameters: FindAllUnitsRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedResponseOfUnitVacancyDto> {
        const response = await this.findAllUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneUnitsRaw(requestParameters: FindOneUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnitOneDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneUnits.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/units/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitOneDtoFromJSON(jsonValue));
    }

    /**
     */
    async findOneUnits(requestParameters: FindOneUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnitOneDto> {
        const response = await this.findOneUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeUnitsRaw(requestParameters: RemoveUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnitDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeUnits.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/units/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitDtoFromJSON(jsonValue));
    }

    /**
     */
    async removeUnits(requestParameters: RemoveUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnitDto> {
        const response = await this.removeUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateUnitsRaw(requestParameters: UpdateUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnitDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUnits.');
        }

        if (requestParameters.updateUnitDto === null || requestParameters.updateUnitDto === undefined) {
            throw new runtime.RequiredError('updateUnitDto','Required parameter requestParameters.updateUnitDto was null or undefined when calling updateUnits.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/units/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUnitDtoToJSON(requestParameters.updateUnitDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnitDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateUnits(requestParameters: UpdateUnitsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnitDto> {
        const response = await this.updateUnitsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
