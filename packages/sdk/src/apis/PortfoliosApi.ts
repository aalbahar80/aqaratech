/* tslint:disable */
/* eslint-disable */
/**
 * Aqaratech API
 * The Aqratech API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaginatedResponseOfPortfolioDto,
    PaginatedResponseOfPortfolioDtoFromJSON,
    PaginatedResponseOfPortfolioDtoToJSON,
    PortfolioDto,
    PortfolioDtoFromJSON,
    PortfolioDtoToJSON,
    UpdatePortfolioDto,
    UpdatePortfolioDtoFromJSON,
    UpdatePortfolioDtoToJSON,
} from '../models';

export interface CreatePortfoliosRequest {
    portfolioDto: PortfolioDto;
    xRoleId?: string;
}

export interface FindAllPortfoliosRequest {
    page?: number;
    take?: number;
    q?: string;
}

export interface FindOnePortfoliosRequest {
    id: string;
}

export interface RemovePortfoliosRequest {
    id: string;
}

export interface UpdatePortfoliosRequest {
    id: string;
    updatePortfolioDto: UpdatePortfolioDto;
}

/**
 * PortfoliosApi - interface
 * 
 * @export
 * @interface PortfoliosApiInterface
 */
export interface PortfoliosApiInterface {
    /**
     * 
     * @param {PortfolioDto} portfolioDto 
     * @param {string} [xRoleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiInterface
     */
    createPortfoliosRaw(requestParameters: CreatePortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PortfolioDto>>;

    /**
     */
    createPortfolios(requestParameters: CreatePortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PortfolioDto>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [take] 
     * @param {string} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiInterface
     */
    findAllPortfoliosRaw(requestParameters: FindAllPortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfPortfolioDto>>;

    /**
     */
    findAllPortfolios(requestParameters: FindAllPortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedResponseOfPortfolioDto>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiInterface
     */
    findOnePortfoliosRaw(requestParameters: FindOnePortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PortfolioDto>>;

    /**
     */
    findOnePortfolios(requestParameters: FindOnePortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PortfolioDto>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiInterface
     */
    removePortfoliosRaw(requestParameters: RemovePortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PortfolioDto>>;

    /**
     */
    removePortfolios(requestParameters: RemovePortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PortfolioDto>;

    /**
     * 
     * @param {string} id 
     * @param {UpdatePortfolioDto} updatePortfolioDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfoliosApiInterface
     */
    updatePortfoliosRaw(requestParameters: UpdatePortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PortfolioDto>>;

    /**
     */
    updatePortfolios(requestParameters: UpdatePortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PortfolioDto>;

}

/**
 * 
 */
export class PortfoliosApi extends runtime.BaseAPI implements PortfoliosApiInterface {

    /**
     */
    async createPortfoliosRaw(requestParameters: CreatePortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PortfolioDto>> {
        if (requestParameters.portfolioDto === null || requestParameters.portfolioDto === undefined) {
            throw new runtime.RequiredError('portfolioDto','Required parameter requestParameters.portfolioDto was null or undefined when calling createPortfolios.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/portfolios`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PortfolioDtoToJSON(requestParameters.portfolioDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioDtoFromJSON(jsonValue));
    }

    /**
     */
    async createPortfolios(requestParameters: CreatePortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PortfolioDto> {
        const response = await this.createPortfoliosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findAllPortfoliosRaw(requestParameters: FindAllPortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfPortfolioDto>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/portfolios`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseOfPortfolioDtoFromJSON(jsonValue));
    }

    /**
     */
    async findAllPortfolios(requestParameters: FindAllPortfoliosRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedResponseOfPortfolioDto> {
        const response = await this.findAllPortfoliosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOnePortfoliosRaw(requestParameters: FindOnePortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PortfolioDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOnePortfolios.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/portfolios/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioDtoFromJSON(jsonValue));
    }

    /**
     */
    async findOnePortfolios(requestParameters: FindOnePortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PortfolioDto> {
        const response = await this.findOnePortfoliosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removePortfoliosRaw(requestParameters: RemovePortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PortfolioDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removePortfolios.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/portfolios/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioDtoFromJSON(jsonValue));
    }

    /**
     */
    async removePortfolios(requestParameters: RemovePortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PortfolioDto> {
        const response = await this.removePortfoliosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePortfoliosRaw(requestParameters: UpdatePortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PortfolioDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePortfolios.');
        }

        if (requestParameters.updatePortfolioDto === null || requestParameters.updatePortfolioDto === undefined) {
            throw new runtime.RequiredError('updatePortfolioDto','Required parameter requestParameters.updatePortfolioDto was null or undefined when calling updatePortfolios.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/portfolios/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePortfolioDtoToJSON(requestParameters.updatePortfolioDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PortfolioDtoFromJSON(jsonValue));
    }

    /**
     */
    async updatePortfolios(requestParameters: UpdatePortfoliosRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PortfolioDto> {
        const response = await this.updatePortfoliosRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
