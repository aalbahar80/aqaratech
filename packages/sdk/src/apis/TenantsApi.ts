/* tslint:disable */
/* eslint-disable */
/**
 * Aqaratech API
 * The Aqratech API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaginatedResponseOfTenantDto,
    PaginatedResponseOfTenantDtoFromJSON,
    PaginatedResponseOfTenantDtoToJSON,
    TenantDto,
    TenantDtoFromJSON,
    TenantDtoToJSON,
    UpdateTenantDto,
    UpdateTenantDtoFromJSON,
    UpdateTenantDtoToJSON,
} from '../models';

export interface CreateTenantsRequest {
    tenantDto: TenantDto;
    xRoleId?: string;
}

export interface FindAllTenantsRequest {
    page?: number;
    take?: number;
    q?: string;
}

export interface FindOneTenantsRequest {
    id: string;
}

export interface RemoveTenantsRequest {
    id: string;
}

export interface UpdateTenantsRequest {
    id: string;
    updateTenantDto: UpdateTenantDto;
}

/**
 * TenantsApi - interface
 * 
 * @export
 * @interface TenantsApiInterface
 */
export interface TenantsApiInterface {
    /**
     * 
     * @param {TenantDto} tenantDto 
     * @param {string} [xRoleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApiInterface
     */
    createTenantsRaw(requestParameters: CreateTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TenantDto>>;

    /**
     */
    createTenants(requestParameters: CreateTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TenantDto>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [take] 
     * @param {string} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApiInterface
     */
    findAllTenantsRaw(requestParameters: FindAllTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfTenantDto>>;

    /**
     */
    findAllTenants(requestParameters: FindAllTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedResponseOfTenantDto>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApiInterface
     */
    findOneTenantsRaw(requestParameters: FindOneTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TenantDto>>;

    /**
     */
    findOneTenants(requestParameters: FindOneTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TenantDto>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApiInterface
     */
    removeTenantsRaw(requestParameters: RemoveTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TenantDto>>;

    /**
     */
    removeTenants(requestParameters: RemoveTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TenantDto>;

    /**
     * 
     * @param {string} id 
     * @param {UpdateTenantDto} updateTenantDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantsApiInterface
     */
    updateTenantsRaw(requestParameters: UpdateTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TenantDto>>;

    /**
     */
    updateTenants(requestParameters: UpdateTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TenantDto>;

}

/**
 * 
 */
export class TenantsApi extends runtime.BaseAPI implements TenantsApiInterface {

    /**
     */
    async createTenantsRaw(requestParameters: CreateTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TenantDto>> {
        if (requestParameters.tenantDto === null || requestParameters.tenantDto === undefined) {
            throw new runtime.RequiredError('tenantDto','Required parameter requestParameters.tenantDto was null or undefined when calling createTenants.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/tenants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TenantDtoToJSON(requestParameters.tenantDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantDtoFromJSON(jsonValue));
    }

    /**
     */
    async createTenants(requestParameters: CreateTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TenantDto> {
        const response = await this.createTenantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findAllTenantsRaw(requestParameters: FindAllTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfTenantDto>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/tenants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseOfTenantDtoFromJSON(jsonValue));
    }

    /**
     */
    async findAllTenants(requestParameters: FindAllTenantsRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedResponseOfTenantDto> {
        const response = await this.findAllTenantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneTenantsRaw(requestParameters: FindOneTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TenantDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneTenants.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/tenants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantDtoFromJSON(jsonValue));
    }

    /**
     */
    async findOneTenants(requestParameters: FindOneTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TenantDto> {
        const response = await this.findOneTenantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeTenantsRaw(requestParameters: RemoveTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TenantDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeTenants.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/tenants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantDtoFromJSON(jsonValue));
    }

    /**
     */
    async removeTenants(requestParameters: RemoveTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TenantDto> {
        const response = await this.removeTenantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTenantsRaw(requestParameters: UpdateTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TenantDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTenants.');
        }

        if (requestParameters.updateTenantDto === null || requestParameters.updateTenantDto === undefined) {
            throw new runtime.RequiredError('updateTenantDto','Required parameter requestParameters.updateTenantDto was null or undefined when calling updateTenants.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/tenants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTenantDtoToJSON(requestParameters.updateTenantDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TenantDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateTenants(requestParameters: UpdateTenantsRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TenantDto> {
        const response = await this.updateTenantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
