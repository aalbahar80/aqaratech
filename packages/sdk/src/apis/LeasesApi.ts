/* tslint:disable */
/* eslint-disable */
/**
 * Aqaratech API
 * The Aqratech API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LeaseDto,
    LeaseDtoFromJSON,
    LeaseDtoToJSON,
    PaginatedResponseOfLeaseDto,
    PaginatedResponseOfLeaseDtoFromJSON,
    PaginatedResponseOfLeaseDtoToJSON,
    UpdateLeaseDto,
    UpdateLeaseDtoFromJSON,
    UpdateLeaseDtoToJSON,
} from '../models';

export interface CreateLeasesRequest {
    leaseDto: LeaseDto;
    xRoleId?: string;
}

export interface FindAllLeasesRequest {
    page?: number;
    take?: number;
    q?: string;
}

export interface FindOneLeasesRequest {
    id: string;
}

export interface RemoveLeasesRequest {
    id: string;
}

export interface UpdateLeasesRequest {
    id: string;
    updateLeaseDto: UpdateLeaseDto;
}

/**
 * LeasesApi - interface
 * 
 * @export
 * @interface LeasesApiInterface
 */
export interface LeasesApiInterface {
    /**
     * 
     * @param {LeaseDto} leaseDto 
     * @param {string} [xRoleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeasesApiInterface
     */
    createLeasesRaw(requestParameters: CreateLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LeaseDto>>;

    /**
     */
    createLeases(requestParameters: CreateLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LeaseDto>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [take] 
     * @param {string} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeasesApiInterface
     */
    findAllLeasesRaw(requestParameters: FindAllLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfLeaseDto>>;

    /**
     */
    findAllLeases(requestParameters: FindAllLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedResponseOfLeaseDto>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeasesApiInterface
     */
    findOneLeasesRaw(requestParameters: FindOneLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LeaseDto>>;

    /**
     */
    findOneLeases(requestParameters: FindOneLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LeaseDto>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeasesApiInterface
     */
    removeLeasesRaw(requestParameters: RemoveLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LeaseDto>>;

    /**
     */
    removeLeases(requestParameters: RemoveLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LeaseDto>;

    /**
     * 
     * @param {string} id 
     * @param {UpdateLeaseDto} updateLeaseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeasesApiInterface
     */
    updateLeasesRaw(requestParameters: UpdateLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LeaseDto>>;

    /**
     */
    updateLeases(requestParameters: UpdateLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LeaseDto>;

}

/**
 * 
 */
export class LeasesApi extends runtime.BaseAPI implements LeasesApiInterface {

    /**
     */
    async createLeasesRaw(requestParameters: CreateLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LeaseDto>> {
        if (requestParameters.leaseDto === null || requestParameters.leaseDto === undefined) {
            throw new runtime.RequiredError('leaseDto','Required parameter requestParameters.leaseDto was null or undefined when calling createLeases.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/leases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LeaseDtoToJSON(requestParameters.leaseDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaseDtoFromJSON(jsonValue));
    }

    /**
     */
    async createLeases(requestParameters: CreateLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LeaseDto> {
        const response = await this.createLeasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findAllLeasesRaw(requestParameters: FindAllLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfLeaseDto>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/leases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseOfLeaseDtoFromJSON(jsonValue));
    }

    /**
     */
    async findAllLeases(requestParameters: FindAllLeasesRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedResponseOfLeaseDto> {
        const response = await this.findAllLeasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOneLeasesRaw(requestParameters: FindOneLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LeaseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneLeases.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/leases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaseDtoFromJSON(jsonValue));
    }

    /**
     */
    async findOneLeases(requestParameters: FindOneLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LeaseDto> {
        const response = await this.findOneLeasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeLeasesRaw(requestParameters: RemoveLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LeaseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeLeases.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/leases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaseDtoFromJSON(jsonValue));
    }

    /**
     */
    async removeLeases(requestParameters: RemoveLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LeaseDto> {
        const response = await this.removeLeasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateLeasesRaw(requestParameters: UpdateLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LeaseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateLeases.');
        }

        if (requestParameters.updateLeaseDto === null || requestParameters.updateLeaseDto === undefined) {
            throw new runtime.RequiredError('updateLeaseDto','Required parameter requestParameters.updateLeaseDto was null or undefined when calling updateLeases.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/leases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLeaseDtoToJSON(requestParameters.updateLeaseDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeaseDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateLeases(requestParameters: UpdateLeasesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LeaseDto> {
        const response = await this.updateLeasesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
