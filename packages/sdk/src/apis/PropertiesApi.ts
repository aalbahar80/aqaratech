/* tslint:disable */
/* eslint-disable */
/**
 * Aqaratech API
 * The Aqratech API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaginatedResponseOfPropertyDto,
    PaginatedResponseOfPropertyDtoFromJSON,
    PaginatedResponseOfPropertyDtoToJSON,
    PropertyDto,
    PropertyDtoFromJSON,
    PropertyDtoToJSON,
    UpdatePropertyDto,
    UpdatePropertyDtoFromJSON,
    UpdatePropertyDtoToJSON,
} from '../models';

export interface CreatePropertiesRequest {
    propertyDto: PropertyDto;
    xRoleId?: string;
}

export interface FindAllPropertiesRequest {
    page?: number;
    take?: number;
    q?: string;
}

export interface FindOnePropertiesRequest {
    id: string;
}

export interface RemovePropertiesRequest {
    id: string;
}

export interface UpdatePropertiesRequest {
    id: string;
    updatePropertyDto: UpdatePropertyDto;
}

/**
 * PropertiesApi - interface
 * 
 * @export
 * @interface PropertiesApiInterface
 */
export interface PropertiesApiInterface {
    /**
     * 
     * @param {PropertyDto} propertyDto 
     * @param {string} [xRoleId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApiInterface
     */
    createPropertiesRaw(requestParameters: CreatePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PropertyDto>>;

    /**
     */
    createProperties(requestParameters: CreatePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PropertyDto>;

    /**
     * 
     * @param {number} [page] 
     * @param {number} [take] 
     * @param {string} [q] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApiInterface
     */
    findAllPropertiesRaw(requestParameters: FindAllPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfPropertyDto>>;

    /**
     */
    findAllProperties(requestParameters: FindAllPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedResponseOfPropertyDto>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApiInterface
     */
    findOnePropertiesRaw(requestParameters: FindOnePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PropertyDto>>;

    /**
     */
    findOneProperties(requestParameters: FindOnePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PropertyDto>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApiInterface
     */
    removePropertiesRaw(requestParameters: RemovePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PropertyDto>>;

    /**
     */
    removeProperties(requestParameters: RemovePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PropertyDto>;

    /**
     * 
     * @param {string} id 
     * @param {UpdatePropertyDto} updatePropertyDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PropertiesApiInterface
     */
    updatePropertiesRaw(requestParameters: UpdatePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PropertyDto>>;

    /**
     */
    updateProperties(requestParameters: UpdatePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PropertyDto>;

}

/**
 * 
 */
export class PropertiesApi extends runtime.BaseAPI implements PropertiesApiInterface {

    /**
     */
    async createPropertiesRaw(requestParameters: CreatePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PropertyDto>> {
        if (requestParameters.propertyDto === null || requestParameters.propertyDto === undefined) {
            throw new runtime.RequiredError('propertyDto','Required parameter requestParameters.propertyDto was null or undefined when calling createProperties.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xRoleId !== undefined && requestParameters.xRoleId !== null) {
            headerParameters['x-role-id'] = String(requestParameters.xRoleId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/properties`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PropertyDtoToJSON(requestParameters.propertyDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyDtoFromJSON(jsonValue));
    }

    /**
     */
    async createProperties(requestParameters: CreatePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PropertyDto> {
        const response = await this.createPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findAllPropertiesRaw(requestParameters: FindAllPropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PaginatedResponseOfPropertyDto>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.take !== undefined) {
            queryParameters['take'] = requestParameters.take;
        }

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/properties`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseOfPropertyDtoFromJSON(jsonValue));
    }

    /**
     */
    async findAllProperties(requestParameters: FindAllPropertiesRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PaginatedResponseOfPropertyDto> {
        const response = await this.findAllPropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async findOnePropertiesRaw(requestParameters: FindOnePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PropertyDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling findOneProperties.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/properties/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyDtoFromJSON(jsonValue));
    }

    /**
     */
    async findOneProperties(requestParameters: FindOnePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PropertyDto> {
        const response = await this.findOnePropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removePropertiesRaw(requestParameters: RemovePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PropertyDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling removeProperties.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/properties/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyDtoFromJSON(jsonValue));
    }

    /**
     */
    async removeProperties(requestParameters: RemovePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PropertyDto> {
        const response = await this.removePropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePropertiesRaw(requestParameters: UpdatePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PropertyDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProperties.');
        }

        if (requestParameters.updatePropertyDto === null || requestParameters.updatePropertyDto === undefined) {
            throw new runtime.RequiredError('updatePropertyDto','Required parameter requestParameters.updatePropertyDto was null or undefined when calling updateProperties.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("oauth-swagger", []);
        }

        const response = await this.request({
            path: `/properties/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdatePropertyDtoToJSON(requestParameters.updatePropertyDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateProperties(requestParameters: UpdatePropertiesRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PropertyDto> {
        const response = await this.updatePropertiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
