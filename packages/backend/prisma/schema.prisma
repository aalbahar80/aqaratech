generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String  @unique
  fullName String?

  roles Role[]
}

enum RoleType {
  ORGADMIN
  PORTFOLIO
  TENANT
}

model Role {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roleType    RoleType
  isDefault   Boolean  @default(false)
  isAccepted  Boolean  @default(false)
  permissions Json?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  portfolioId    String?
  portfolio      Portfolio?   @relation(fields: [portfolioId], references: [id], onDelete: Restrict)
  tenantId       String?
  tenant         Tenant?      @relation(fields: [tenantId], references: [id], onDelete: Restrict)
}

model Tenant {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fullName     String    @default("")
  label        String?
  civilid      String?
  dob          DateTime?
  phone        String?
  passportNum  String?
  nationality  String?
  residencyNum String?
  residencyEnd DateTime?

  leases            Lease[]
  maintenanceOrders MaintenanceOrder[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)

  roles Role[]
  files File[]
}

model Portfolio {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fullName String    @default("")
  label    String?
  civilid  String?
  phone    String?
  dob      DateTime?

  expenses          Expense[]
  maintenanceOrders MaintenanceOrder[]
  properties        Property[]

  roles Role[]

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)

  files File[]
}

model Organization {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  fullName String  @default("")
  label    String?
  isActive Boolean @default(true)

  roles      Role[]
  portfolios Portfolio[]
  tenants    Tenant[]

  planId String?
  plan   Plan?   @relation(fields: [planId], references: [id], onDelete: Restrict)

  planInvoices         PlanInvoice[]
  organizationSettings OrganizationSettings?
}

model OrganizationSettings {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expenseCategoryTree Json

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)
  organizationId String       @unique
}

model Plan {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  label       String  @default("")
  title       String  @default("")
  description String?
  amount      Int     @default(0)

  organizations Organization[]
}

model PlanInvoice {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  label       String  @default("")
  title       String  @default("")
  description String?
  amount      Int     @default(0)

  organizations Organization[]
}

model Expense {
  id                 String            @id @default(uuid())
  unitId             String?
  propertyId         String?
  portfolioId        String
  maintenanceOrderId String?
  categoryId         String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  amount             Float
  postAt             DateTime
  memo               String?
  portfolio          Portfolio         @relation(fields: [portfolioId], references: [id], onDelete: Restrict)
  maintenanceOrder   MaintenanceOrder? @relation(fields: [maintenanceOrderId], references: [id], onDelete: Restrict)
  property           Property?         @relation(fields: [propertyId], references: [id], onDelete: Restrict)
  unit               Unit?             @relation(fields: [unitId], references: [id], onDelete: Restrict)
  files              File[]
}

model Lease {
  id            String         @id @default(uuid())
  tenantId      String
  unitId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  start         DateTime
  end           DateTime
  monthlyRent   Float
  deposit       Float          @default(0)
  canPay        Boolean        @default(true)
  notify        Boolean        @default(true)
  license       String?
  tenant        Tenant         @relation(fields: [tenantId], references: [id], onDelete: Restrict)
  unit          Unit           @relation(fields: [unitId], references: [id], onDelete: Restrict)
  leaseInvoices LeaseInvoice[]
  files         File[]
}

model MaintenanceOrder {
  id          String     @id @default(uuid())
  tenantId    String?
  unitId      String?
  propertyId  String?
  portfolioId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  completedAt DateTime?
  title       String?
  description String?
  status      String?
  portfolio   Portfolio? @relation(fields: [portfolioId], references: [id], onDelete: Restrict)
  property    Property?  @relation(fields: [propertyId], references: [id], onDelete: Restrict)
  tenant      Tenant?    @relation(fields: [tenantId], references: [id], onDelete: Restrict)
  unit        Unit?      @relation(fields: [unitId], references: [id], onDelete: Restrict)
  expenses    Expense[]
  files       File[]
}

model Property {
  id                String             @id @default(uuid())
  portfolioId       String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  area              String?
  block             String?
  avenue            String?
  street            String?
  number            String?
  parcel            String?
  paci              String?
  cost              Float?
  label             String?
  long              Float?
  lat               Float?
  portfolio         Portfolio          @relation(fields: [portfolioId], references: [id], onDelete: Restrict)
  expenses          Expense[]
  maintenanceOrders MaintenanceOrder[]
  units             Unit[]
  files             File[]
}

model LeaseInvoice {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dueAt       DateTime?
  postAt      DateTime
  paidAt      DateTime?
  isPaid      Boolean   @default(false)
  amount      Float
  memo        String?
  mfPaymentId String?
  leaseId     String
  lease       Lease     @relation(fields: [leaseId], references: [id], onDelete: Restrict)
  files       File[]
}

model Unit {
  id                String             @id @default(uuid())
  propertyId        String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  unitNumber        String
  floor             Float?
  size              Float?
  bed               Float?
  bath              Float?
  marketRent        Float?
  type              String?
  usage             String?
  label             String?
  property          Property           @relation(fields: [propertyId], references: [id], onDelete: Restrict)
  expenses          Expense[]
  leases            Lease[]
  maintenanceOrders MaintenanceOrder[]
  files             File[]
}

model File {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  label     String?
  fileName  String

  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  portfolioId String?
  portfolio   Portfolio? @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  unitId String?
  unit   Unit?   @relation(fields: [unitId], references: [id], onDelete: Cascade)

  expenseId String?
  expense   Expense? @relation(fields: [expenseId], references: [id], onDelete: Cascade)

  leaseId String?
  lease   Lease?  @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  leaseInvoiceId String?
  leaseInvoice   LeaseInvoice? @relation(fields: [leaseInvoiceId], references: [id], onDelete: Cascade)

  maintenanceOrderId String?
  maintenanceOrder   MaintenanceOrder? @relation(fields: [maintenanceOrderId], references: [id], onDelete: Cascade)
}
