generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    // provider             = "mysql"
    // url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model User {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    email    String  @unique
    fullName String?

    admins     Admin[]
    portfolios Portfolio[]
    tenants    Tenant[]
}

model Admin {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    isSuper Boolean @default(false)

    userId String?
    user   User?   @relation(fields: [userId], references: [id], onDelete: Restrict)

    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)
}

model Tenant {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    fullName      String    @default("")
    shortName     String?
    civilid       String?
    dob           DateTime?
    phone         String?
    email         String?
    passportNum   String?
    nationality   String?
    residencyNum  String?
    residencyEnd  DateTime?
    contactMethod String?

    leases            Lease[]
    maintenanceOrders MaintenanceOrder[]

    users User[]
}

model Portfolio {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    fullName  String    @default("")
    shortName String?
    civilid   String?
    phone     String?
    email     String?
    dob       DateTime?

    expenses          Expense[]
    maintenanceOrders MaintenanceOrder[]
    properties        Property[]

    users User[]

    organizationId String
    organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)
}

model Organization {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    fullName  String  @default("")
    shortName String?

    admins     Admin[]
    portfolios Portfolio[]

    planId String?
    plan   Plan?   @relation(fields: [planId], references: [id], onDelete: Restrict)

    planInvoices PlanInvoice[]
}

model Plan {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    label       String  @default("")
    title       String  @default("")
    description String?
    amount      Int     @default(0)

    organizations Organization[]
}

model PlanInvoice {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    label       String  @default("")
    title       String  @default("")
    description String?
    amount      Int     @default(0)

    organization Organization @relation(fields: [organizationId], references: [id], onDelete: Restrict)
}

model Expense {
    id                 String            @id @default(uuid())
    unitId             String?
    propertyId         String?
    portfolioId        String?
    maintenanceOrderId String?
    categoryId         Int?
    createdAt          DateTime          @default(now())
    updatedAt          DateTime          @updatedAt
    amount             Float
    postAt             DateTime
    memo               String?           @db.Text
    portfolio          Portfolio?        @relation(fields: [portfolioId], references: [id], onDelete: Restrict)
    maintenanceOrder   MaintenanceOrder? @relation(fields: [maintenanceOrderId], references: [id], onDelete: Restrict)
    property           Property?         @relation(fields: [propertyId], references: [id], onDelete: Restrict)
    unit               Unit?             @relation(fields: [unitId], references: [id], onDelete: Restrict)
    category           ExpenseCategory?  @relation(fields: [categoryId], references: [id], onDelete: Restrict)

    @@index([unitId])
    @@index([propertyId])
    @@index([portfolioId])
    @@index([maintenanceOrderId])
    @@index([categoryId])
}

model ExpenseCategory {
    id       Int           @id @default(autoincrement())
    groupId  Int
    en       String        @unique
    ar       String        @unique
    group    ExpenseGroup? @relation(fields: [groupId], references: [id], onDelete: Restrict)
    expenses Expense[]

    @@index([groupId])
}

model ExpenseGroup {
    id         Int               @id @default(autoincrement())
    en         String            @unique
    ar         String            @unique
    categories ExpenseCategory[]
}

model Lease {
    id           String        @id @default(uuid())
    tenantId     String
    unitId       String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    start        DateTime
    end          DateTime
    monthlyRent  Float
    deposit      Float         @default(0)
    deactivated  Boolean       @default(false)
    notify       Boolean       @default(true)
    license      String?
    tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Restrict)
    unit         Unit          @relation(fields: [unitId], references: [id], onDelete: Restrict)
    transactions Transaction[]

    @@index([tenantId])
    @@index([unitId])
}

model MaintenanceOrder {
    id          String     @id @default(uuid())
    tenantId    String?
    unitId      String?
    propertyId  String?
    portfolioId String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    completedAt DateTime?
    title       String?
    description String?    @db.Text
    status      String?
    portfolio   Portfolio? @relation(fields: [portfolioId], references: [id], onDelete: Restrict)
    property    Property?  @relation(fields: [propertyId], references: [id], onDelete: Restrict)
    tenant      Tenant?    @relation(fields: [tenantId], references: [id], onDelete: Restrict)
    unit        Unit?      @relation(fields: [unitId], references: [id], onDelete: Restrict)
    expenses    Expense[]

    @@index([tenantId])
    @@index([unitId])
    @@index([propertyId])
    @@index([portfolioId])
}

model Property {
    id                String             @id @default(uuid())
    portfolioId       String
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    area              String?
    block             String?
    avenue            String?
    street            String?
    number            String?
    parcel            String?
    paci              String?
    cost              Float?
    long              Float?
    lat               Float?
    portfolio         Portfolio          @relation(fields: [portfolioId], references: [id], onDelete: Restrict)
    expenses          Expense[]
    maintenanceOrders MaintenanceOrder[]
    units             Unit[]

    @@index([portfolioId])
}

model Transaction {
    id          String    @id @default(uuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    dueAt       DateTime?
    postAt      DateTime
    paidAt      DateTime?
    isPaid      Boolean   @default(false)
    amount      Float
    memo        String?   @db.Text
    mfPaymentId String?
    leaseId     String
    reminderAt  DateTime?
    lease       Lease     @relation(fields: [leaseId], references: [id], onDelete: Restrict)

    @@index([leaseId])
}

model Unit {
    id                String             @id @default(uuid())
    propertyId        String
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    unitNumber        String
    floor             Float?
    size              Float?
    bed               Float?
    bath              Float?
    marketRent        Float?
    type              String?
    usage             String?
    property          Property           @relation(fields: [propertyId], references: [id], onDelete: Restrict)
    expenses          Expense[]
    leases            Lease[]
    maintenanceOrders MaintenanceOrder[]

    @@index([propertyId])
}
