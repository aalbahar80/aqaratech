openapi: 3.0.0
paths:
  /:
    get:
      operationId: getHello
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
  /tenants:
    post:
      operationId: create
      parameters:
        - &ref_0
          name: x-role-id
          in: header
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTenantDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantDto'
      tags: &ref_1
        - tenants
    get:
      operationId: findAll
      parameters:
        - *ref_0
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedTenantDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfTenantDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/TenantDto'
      tags: *ref_1
  /tenants/{id}:
    get:
      operationId: findOne
      parameters:
        - *ref_0
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantOneDto'
      tags: *ref_1
    patch:
      operationId: update
      parameters:
        - *ref_0
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTenantDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantDto'
      tags: *ref_1
    delete:
      operationId: remove
      parameters:
        - *ref_0
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantDto'
      tags: *ref_1
  /tenants/{id}/leases:
    get:
      operationId: findLeases
      parameters:
        - *ref_0
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedLeaseDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfLeaseDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/LeaseDto'
      tags: *ref_1
  /tenants/{id}/invoices:
    get:
      operationId: findInvoices
      parameters:
        - *ref_0
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
        - name: start
          required: false
          in: query
          schema:
            type: string
        - name: end
          required: false
          in: query
          schema:
            type: string
        - name: paidStatus
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/PaidStatusEnum'
        - name: portfolioId
          required: false
          in: query
          schema:
            type: string
        - name: propertyId
          required: false
          in: query
          schema:
            type: string
        - name: unitId
          required: false
          in: query
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedLeaseInvoiceDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfLeaseInvoiceDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/LeaseInvoiceDto'
      tags: *ref_1
  /tenants/{id}/roles:
    get:
      operationId: findRoles
      parameters:
        - *ref_0
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedRoleDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfRoleDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/RoleDto'
      tags: *ref_1
  /roles:
    post:
      operationId: create
      parameters:
        - &ref_2
          name: x-role-id
          in: header
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: object
      tags: &ref_3
        - roles
  /roles/{id}:
    delete:
      operationId: remove
      parameters:
        - *ref_2
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: *ref_3
  /roles/{id}/send-invite:
    post:
      operationId: sendInvite
      parameters:
        - *ref_2
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
      tags: *ref_3
  /leaseInvoices:
    post:
      operationId: create
      parameters:
        - &ref_4
          name: x-role-id
          in: header
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLeaseInvoiceDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseInvoiceBasicDto'
      tags: &ref_5
        - leaseInvoices
    get:
      operationId: findAll
      parameters:
        - *ref_4
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
        - name: start
          required: false
          in: query
          schema:
            type: string
        - name: end
          required: false
          in: query
          schema:
            type: string
        - name: paidStatus
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/PaidStatusEnum'
        - name: portfolioId
          required: false
          in: query
          schema:
            type: string
        - name: propertyId
          required: false
          in: query
          schema:
            type: string
        - name: unitId
          required: false
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedLeaseInvoiceDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfLeaseInvoiceDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/LeaseInvoiceDto'
      tags: *ref_5
  /leaseInvoices/{id}:
    get:
      operationId: findOne
      parameters:
        - *ref_4
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseInvoiceDto'
      tags: *ref_5
    patch:
      operationId: update
      parameters:
        - *ref_4
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLeaseInvoiceDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseInvoiceBasicDto'
      tags: *ref_5
    delete:
      operationId: remove
      parameters:
        - *ref_4
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseInvoiceBasicDto'
      tags: *ref_5
  /leaseInvoices/{id}/send-email:
    post:
      operationId: sendEmail
      parameters:
        - *ref_4
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: *ref_5
  /leases:
    post:
      operationId: create
      parameters:
        - &ref_6
          name: x-role-id
          in: header
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLeaseDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseBasicDto'
      tags: &ref_7
        - leases
    get:
      operationId: findAll
      parameters:
        - *ref_6
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedLeaseDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfLeaseDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/LeaseDto'
      tags: *ref_7
  /leases/{id}:
    get:
      operationId: findOne
      parameters:
        - *ref_6
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseDto'
      tags: *ref_7
    patch:
      operationId: update
      parameters:
        - *ref_6
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLeaseDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseBasicDto'
      tags: *ref_7
    delete:
      operationId: remove
      parameters:
        - *ref_6
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseBasicDto'
      tags: *ref_7
  /leases/{id}/invoices:
    get:
      operationId: findInvoices
      parameters:
        - *ref_6
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
        - name: start
          required: false
          in: query
          schema:
            type: string
        - name: end
          required: false
          in: query
          schema:
            type: string
        - name: paidStatus
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/PaidStatusEnum'
        - name: portfolioId
          required: false
          in: query
          schema:
            type: string
        - name: propertyId
          required: false
          in: query
          schema:
            type: string
        - name: unitId
          required: false
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedLeaseInvoiceDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfLeaseInvoiceDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/LeaseInvoiceDto'
      tags: *ref_7
    post:
      operationId: createInvoices
      parameters:
        - *ref_6
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateLeaseInvoiceDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeaseInvoiceBasicDto'
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LeaseInvoiceBasicDto'
      tags: *ref_7
  /portfolios:
    post:
      operationId: create
      parameters:
        - &ref_8
          name: x-role-id
          in: header
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePortfolioDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioDto'
      tags: &ref_9
        - portfolios
    get:
      operationId: findAll
      parameters:
        - *ref_8
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedPortfolioDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfPortfolioDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/PortfolioDto'
      tags: *ref_9
  /portfolios/{id}:
    get:
      operationId: findOne
      parameters:
        - *ref_8
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioDto'
      tags: *ref_9
    patch:
      operationId: update
      parameters:
        - *ref_8
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePortfolioDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioDto'
      tags: *ref_9
    delete:
      operationId: remove
      parameters:
        - *ref_8
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioDto'
      tags: *ref_9
  /portfolios/{id}/roles:
    get:
      operationId: findRoles
      parameters:
        - *ref_8
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedRoleDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfRoleDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/RoleDto'
      tags: *ref_9
  /portfolios/{id}/properties:
    get:
      operationId: findProperties
      parameters:
        - *ref_8
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedPropertyDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfPropertyDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/PropertyDto'
      tags: *ref_9
  /portfolios/{id}/units:
    get:
      operationId: findUnits
      parameters:
        - *ref_8
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedUnitDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfUnitDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnitDto'
      tags: *ref_9
  /properties:
    post:
      operationId: create
      parameters:
        - &ref_10
          name: x-role-id
          in: header
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePropertyDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyDto'
      tags: &ref_11
        - properties
    get:
      operationId: findAll
      parameters:
        - *ref_10
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedPropertyDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfPropertyDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/PropertyDto'
      tags: *ref_11
  /properties/{id}:
    get:
      operationId: findOne
      parameters:
        - *ref_10
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyDto'
      tags: *ref_11
    patch:
      operationId: update
      parameters:
        - *ref_10
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePropertyDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyDto'
      tags: *ref_11
    delete:
      operationId: remove
      parameters:
        - *ref_10
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyDto'
      tags: *ref_11
  /properties/{id}/units:
    get:
      operationId: findUnits
      parameters:
        - *ref_10
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedUnitDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfUnitDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnitDto'
      tags: *ref_11
  /units:
    post:
      operationId: create
      parameters:
        - &ref_12
          name: x-role-id
          in: header
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUnitDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitDto'
      tags: &ref_13
        - units
    get:
      operationId: findAll
      parameters:
        - *ref_12
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedUnitDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfUnitDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnitDto'
      tags: *ref_13
  /units/{id}:
    get:
      operationId: findOne
      parameters:
        - *ref_12
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitDto'
      tags: *ref_13
    patch:
      operationId: update
      parameters:
        - *ref_12
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUnitDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitDto'
      tags: *ref_13
    delete:
      operationId: remove
      parameters:
        - *ref_12
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: *ref_13
  /units/{id}/leases:
    get:
      operationId: findLeases
      parameters:
        - *ref_12
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedLeaseDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfLeaseDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/LeaseDto'
      tags: *ref_13
  /users:
    get:
      operationId: findAll
      parameters:
        - &ref_14
          name: x-role-id
          in: header
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedUserDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfUserDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserDto'
      tags: &ref_15
        - users
  /users/me:
    get:
      operationId: findProfile
      parameters:
        - *ref_14
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidatedUserDto'
        '404':
          description: ''
      tags: *ref_15
  /users/{id}:
    get:
      operationId: findOne
      parameters:
        - *ref_14
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidatedUserDto'
        '404':
          description: ''
      tags: *ref_15
  /expenses:
    post:
      operationId: create
      parameters:
        - &ref_16
          name: x-role-id
          in: header
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExpenseDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseDto'
      tags: &ref_17
        - expenses
    get:
      operationId: findAll
      parameters:
        - *ref_16
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
        - name: start
          required: false
          in: query
          schema:
            type: string
        - name: end
          required: false
          in: query
          schema:
            type: string
        - name: portfolioId
          required: false
          in: query
          schema:
            type: string
        - name: propertyId
          required: false
          in: query
          schema:
            type: string
        - name: unitId
          required: false
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedExpenseDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfExpenseDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/ExpenseDto'
      tags: *ref_17
  /expenses/{id}:
    get:
      operationId: findOne
      parameters:
        - *ref_16
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseDto'
      tags: *ref_17
    patch:
      operationId: update
      parameters:
        - *ref_16
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateExpenseDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseDto'
      tags: *ref_17
    delete:
      operationId: remove
      parameters:
        - *ref_16
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseDto'
      tags: *ref_17
  /search:
    post:
      operationId: initSearch
      parameters:
        - &ref_18
          name: x-role-id
          in: header
          schema:
            type: string
      responses:
        '201':
          description: ''
      tags: &ref_19
        - search
    delete:
      operationId: remove
      parameters:
        - *ref_18
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
      tags: *ref_19
  /organizations:
    post:
      operationId: create
      parameters:
        - &ref_20
          name: x-role-id
          in: header
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationCreatedDto'
      tags: &ref_21
        - organizations
  /organizations/{id}:
    get:
      operationId: findOne
      parameters:
        - *ref_20
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDto'
      tags: *ref_21
  /organizations/{id}/roles:
    get:
      operationId: findRoles
      parameters:
        - *ref_20
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedRoleDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfRoleDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/RoleDto'
      tags: *ref_21
  /organizations/{id}/search:
    get:
      operationId: search
      parameters:
        - *ref_20
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: query
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
      tags: *ref_21
  /organizations/{id}/settings:
    get:
      operationId: findSettings
      parameters:
        - *ref_20
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationSettingsDto'
      tags: *ref_21
    patch:
      operationId: updateSettings
      parameters:
        - *ref_20
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationSettingsDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationSettingsDto'
      tags: *ref_21
  /analytics/incomeByMonth:
    get:
      operationId: getIncomeByMonth
      parameters:
        - &ref_22
          name: x-role-id
          in: header
          schema:
            type: string
        - name: page
          required: false
          in: query
          schema:
            minimum: 1
            default: 1
            type: number
        - name: take
          required: false
          in: query
          schema:
            minimum: 1
            maximum: 1000
            default: 20
            type: number
        - name: q
          required: false
          in: query
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/CombinedEnum'
        - name: sortOrder
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/SortOrderEnum'
        - name: filter
          required: false
          in: query
          schema:
            type: object
        - name: start
          required: false
          in: query
          schema:
            type: string
        - name: end
          required: false
          in: query
          schema:
            type: string
        - name: paidStatus
          required: false
          in: query
          schema:
            $ref: '#/components/schemas/PaidStatusEnum'
        - name: portfolioId
          required: false
          in: query
          schema:
            type: string
        - name: propertyId
          required: false
          in: query
          schema:
            type: string
        - name: unitId
          required: false
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ByMonthDto'
      tags: &ref_23
        - analytics
  /analytics/expensesByMonth:
    get:
      operationId: getExpensesByMonth
      parameters:
        - *ref_22
        - name: start
          required: false
          in: query
          schema:
            type: string
        - name: end
          required: false
          in: query
          schema:
            type: string
        - name: portfolioId
          required: false
          in: query
          schema:
            type: string
        - name: propertyId
          required: false
          in: query
          schema:
            type: string
        - name: unitId
          required: false
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ByMonthDto'
      tags: *ref_23
  /meta/expenseTree:
    get:
      operationId: findExpenseTypes
      parameters:
        - name: organizationId
          required: false
          in: query
          schema:
            type: string
        - name: portfolioId
          required: false
          in: query
          schema:
            type: string
        - name: propertyId
          required: false
          in: query
          schema:
            type: string
        - name: unitId
          required: false
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseCategoryDto'
      tags:
        - meta
info:
  title: Aqaratech API
  description: The Aqratech API description
  version: '1.0'
  contact: {}
tags:
  - name: aqaratech
    description: ''
servers:
  - url: http://localhost:3002
  - url: https://nestjs-dev.onrender.com
  - url: https://api.nest.letand.be
  - url: https://aqar.live/api
  - url: https://d164hjk5s8rpsc.cloudfront.net
components:
  securitySchemes:
    oauth-swagger:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://dev-eehvhdp2.eu.auth0.com/authorize?audience=letand.be/api
          tokenUrl: https://dev-eehvhdp2.eu.auth0.com/oauth/token
          scopes:
            openid profile email: default scope
            openid: >-
              to indicate that the application intends to use OIDC to verify the
              user's identity
            profile: to get name, nickname, and picture
            email: to get email and email_verified
  schemas:
    CreateTenantDto:
      type: object
      properties:
        organizationId:
          type: string
        fullName:
          type: string
          minLength: 1
          maxLength: 255
        label:
          type: string
          nullable: true
          default: null
        civilid:
          type: string
          nullable: true
          default: null
        phone:
          type: string
          nullable: true
          default: null
        dob:
          format: date-time
          type: string
          nullable: true
          default: null
        passportNum:
          type: string
          nullable: true
          default: null
        nationality:
          type: string
          nullable: true
          default: null
        residencyNum:
          type: string
          nullable: true
          default: null
        residencyEnd:
          format: date-time
          type: string
          nullable: true
          default: null
      required:
        - organizationId
        - fullName
    TenantDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        organizationId:
          type: string
        fullName:
          type: string
          minLength: 1
          maxLength: 255
        label:
          type: string
          nullable: true
          default: null
        civilid:
          type: string
          nullable: true
          default: null
        phone:
          type: string
          nullable: true
          default: null
        dob:
          format: date-time
          type: string
          nullable: true
          default: null
        passportNum:
          type: string
          nullable: true
          default: null
        nationality:
          type: string
          nullable: true
          default: null
        residencyNum:
          type: string
          nullable: true
          default: null
        residencyEnd:
          format: date-time
          type: string
          nullable: true
          default: null
      required:
        - id
        - createdAt
        - updatedAt
        - organizationId
        - fullName
        - label
        - civilid
        - phone
        - dob
        - passportNum
        - nationality
        - residencyNum
        - residencyEnd
    CombinedEnum:
      type: string
      enum:
        - id
        - createdAt
        - updatedAt
        - fullName
        - label
        - civilid
        - dob
        - phone
        - passportNum
        - nationality
        - residencyNum
        - residencyEnd
        - organizationId
        - portfolioId
        - area
        - block
        - avenue
        - street
        - number
        - parcel
        - paci
        - cost
        - long
        - lat
        - propertyId
        - unitNumber
        - floor
        - size
        - bed
        - bath
        - marketRent
        - type
        - usage
        - tenantId
        - unitId
        - start
        - end
        - monthlyRent
        - deposit
        - deactivated
        - notify
        - license
        - dueAt
        - postAt
        - paidAt
        - isPaid
        - amount
        - memo
        - mfPaymentId
        - leaseId
        - maintenanceOrderId
        - categoryId
        - completedAt
        - title
        - description
        - status
    SortOrderEnum:
      type: string
      enum:
        - asc
        - desc
    BreadcrumbDto:
      type: object
      properties:
        rel:
          enum:
            - Tenant
            - Portfolio
            - Property
            - Unit
            - Lease
            - Maintenance Order
          type: string
        href:
          type: string
        id:
          type: string
        label:
          type: string
      required:
        - rel
        - href
        - id
        - label
    LeaseBreadcrumbsDto:
      type: object
      properties:
        portfolio:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
        property:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
        unit:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
        tenant:
          $ref: '#/components/schemas/BreadcrumbDto'
      required:
        - portfolio
        - property
        - unit
        - tenant
    TenantLeaseDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        tenantId:
          type: string
        unitId:
          type: string
        start:
          format: date-time
          type: string
        end:
          format: date-time
          type: string
        monthlyRent:
          type: number
          minimum: 1
        deposit:
          type: number
          default: 0
        deactivated:
          type: boolean
          default: false
        notify:
          type: boolean
          default: true
        license:
          type: string
          nullable: true
          default: null
        breadcrumbs:
          $ref: '#/components/schemas/LeaseBreadcrumbsDto'
    TenantOneDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        leases:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/TenantLeaseDto'
        organizationId:
          type: string
        fullName:
          type: string
          minLength: 1
          maxLength: 255
        label:
          type: string
          nullable: true
          default: null
        civilid:
          type: string
          nullable: true
          default: null
        phone:
          type: string
          nullable: true
          default: null
        dob:
          format: date-time
          type: string
          nullable: true
          default: null
        passportNum:
          type: string
          nullable: true
          default: null
        nationality:
          type: string
          nullable: true
          default: null
        residencyNum:
          type: string
          nullable: true
          default: null
        residencyEnd:
          format: date-time
          type: string
          nullable: true
          default: null
      required:
        - id
        - createdAt
        - updatedAt
        - leases
        - organizationId
        - fullName
        - label
        - civilid
        - phone
        - dob
        - passportNum
        - nationality
        - residencyNum
        - residencyEnd
    UpdateTenantDto:
      type: object
      properties:
        fullName:
          type: string
          minLength: 1
          maxLength: 255
        label:
          type: string
          nullable: true
          default: null
        civilid:
          type: string
          nullable: true
          default: null
        phone:
          type: string
          nullable: true
          default: null
        dob:
          format: date-time
          type: string
          nullable: true
          default: null
        passportNum:
          type: string
          nullable: true
          default: null
        nationality:
          type: string
          nullable: true
          default: null
        residencyNum:
          type: string
          nullable: true
          default: null
        residencyEnd:
          format: date-time
          type: string
          nullable: true
          default: null
    LeaseDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        breadcrumbs:
          $ref: '#/components/schemas/LeaseBreadcrumbsDto'
        tenantId:
          type: string
        unitId:
          type: string
        start:
          format: date-time
          type: string
        end:
          format: date-time
          type: string
        monthlyRent:
          type: number
          minimum: 1
        deposit:
          type: number
          default: 0
        deactivated:
          type: boolean
          default: false
        notify:
          type: boolean
          default: true
        license:
          type: string
          nullable: true
          default: null
      required:
        - id
        - createdAt
        - updatedAt
        - breadcrumbs
        - tenantId
        - unitId
        - start
        - end
        - monthlyRent
        - deposit
        - deactivated
        - notify
        - license
    LeaseInvoiceBreadcrumbsDto:
      type: object
      properties:
        portfolio:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
        property:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
        unit:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
        lease:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
        tenant:
          $ref: '#/components/schemas/BreadcrumbDto'
      required:
        - portfolio
        - property
        - unit
        - lease
        - tenant
    LeaseInvoiceDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        breadcrumbs:
          $ref: '#/components/schemas/LeaseInvoiceBreadcrumbsDto'
        amount:
          type: number
          minimum: 1
        postAt:
          format: date-time
          type: string
        leaseId:
          type: string
        dueAt:
          format: date-time
          type: string
          nullable: true
          default: null
        paidAt:
          format: date-time
          type: string
          nullable: true
          default: null
        isPaid:
          type: boolean
          default: false
        memo:
          type: string
          nullable: true
          default: null
      required:
        - id
        - createdAt
        - updatedAt
        - breadcrumbs
        - amount
        - postAt
        - leaseId
        - dueAt
        - paidAt
        - isPaid
        - memo
    PaidStatusEnum:
      type: string
      enum:
        - all
        - paid
        - unpaid
    RoleTypeEnum:
      type: string
      enum:
        - ORGADMIN
        - PORTFOLIO
        - TENANT
    RoleDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        roleType:
          $ref: '#/components/schemas/RoleTypeEnum'
        userId:
          type: string
        email:
          type: string
        organizationId:
          type: string
        portfolioId:
          type: string
          nullable: true
          default: null
        tenantId:
          type: string
          nullable: true
          default: null
        isAccepted:
          type: boolean
        isDefault:
          type: boolean
      required:
        - id
        - createdAt
        - updatedAt
        - roleType
        - userId
        - organizationId
        - portfolioId
        - tenantId
        - isAccepted
        - isDefault
    CreateRoleDto:
      type: object
      properties:
        roleType:
          $ref: '#/components/schemas/RoleTypeEnum'
        organizationId:
          type: string
        email:
          type: string
        portfolioId:
          type: string
          nullable: true
          default: null
        tenantId:
          type: string
          nullable: true
          default: null
        isAccepted:
          type: boolean
        isDefault:
          type: boolean
      required:
        - roleType
        - organizationId
        - email
    UserDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        fullName:
          type: string
          nullable: true
          default: null
        email:
          type: string
      required:
        - id
        - createdAt
        - updatedAt
        - email
    CreateLeaseInvoiceDto:
      type: object
      properties:
        amount:
          type: number
          minimum: 1
        postAt:
          format: date-time
          type: string
        leaseId:
          type: string
        dueAt:
          format: date-time
          type: string
          nullable: true
          default: null
        paidAt:
          format: date-time
          type: string
          nullable: true
          default: null
        isPaid:
          type: boolean
          default: false
        memo:
          type: string
          nullable: true
          default: null
      required:
        - amount
        - postAt
        - leaseId
    LeaseInvoiceBasicDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        amount:
          type: number
          minimum: 1
        postAt:
          format: date-time
          type: string
        leaseId:
          type: string
        dueAt:
          format: date-time
          type: string
          nullable: true
          default: null
        paidAt:
          format: date-time
          type: string
          nullable: true
          default: null
        isPaid:
          type: boolean
          default: false
        memo:
          type: string
          nullable: true
          default: null
      required:
        - id
        - createdAt
        - updatedAt
        - amount
        - postAt
        - leaseId
        - dueAt
        - paidAt
        - isPaid
        - memo
    UpdateLeaseInvoiceDto:
      type: object
      properties:
        amount:
          type: number
          minimum: 1
        postAt:
          format: date-time
          type: string
        dueAt:
          format: date-time
          type: string
          nullable: true
          default: null
        paidAt:
          format: date-time
          type: string
          nullable: true
          default: null
        isPaid:
          type: boolean
          default: false
        memo:
          type: string
          nullable: true
          default: null
    CreateLeaseDto:
      type: object
      properties:
        tenantId:
          type: string
        unitId:
          type: string
        start:
          format: date-time
          type: string
        end:
          format: date-time
          type: string
        monthlyRent:
          type: number
          minimum: 1
        deposit:
          type: number
          default: 0
        deactivated:
          type: boolean
          default: false
        notify:
          type: boolean
          default: true
        license:
          type: string
          nullable: true
          default: null
      required:
        - tenantId
        - unitId
        - start
        - end
        - monthlyRent
    LeaseBasicDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        tenantId:
          type: string
        unitId:
          type: string
        start:
          format: date-time
          type: string
        end:
          format: date-time
          type: string
        monthlyRent:
          type: number
          minimum: 1
        deposit:
          type: number
          default: 0
        deactivated:
          type: boolean
          default: false
        notify:
          type: boolean
          default: true
        license:
          type: string
          nullable: true
          default: null
      required:
        - id
        - createdAt
        - updatedAt
        - tenantId
        - unitId
        - start
        - end
        - monthlyRent
        - deposit
        - deactivated
        - notify
        - license
    UpdateLeaseDto:
      type: object
      properties:
        start:
          format: date-time
          type: string
        end:
          format: date-time
          type: string
        monthlyRent:
          type: number
          minimum: 1
        deposit:
          type: number
          default: 0
        deactivated:
          type: boolean
          default: false
        notify:
          type: boolean
          default: true
        license:
          type: string
          nullable: true
          default: null
    CreatePortfolioDto:
      type: object
      properties:
        organizationId:
          type: string
        fullName:
          type: string
          minLength: 1
          maxLength: 255
        label:
          type: string
          nullable: true
          default: null
        civilid:
          type: string
          nullable: true
          default: null
        phone:
          type: string
          nullable: true
          default: null
        dob:
          format: date-time
          type: string
          nullable: true
          default: null
      required:
        - organizationId
        - fullName
    PortfolioDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        organizationId:
          type: string
        fullName:
          type: string
          minLength: 1
          maxLength: 255
        label:
          type: string
          nullable: true
          default: null
        civilid:
          type: string
          nullable: true
          default: null
        phone:
          type: string
          nullable: true
          default: null
        dob:
          format: date-time
          type: string
          nullable: true
          default: null
      required:
        - id
        - createdAt
        - updatedAt
        - organizationId
        - fullName
        - label
        - civilid
        - phone
        - dob
    UpdatePortfolioDto:
      type: object
      properties:
        fullName:
          type: string
          minLength: 1
          maxLength: 255
        label:
          type: string
          nullable: true
          default: null
        civilid:
          type: string
          nullable: true
          default: null
        phone:
          type: string
          nullable: true
          default: null
        dob:
          format: date-time
          type: string
          nullable: true
          default: null
    PropertyBreadcrumbsDto:
      type: object
      properties:
        portfolio:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
        property:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
      required:
        - portfolio
        - property
    PropertyDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        breadcrumbs:
          $ref: '#/components/schemas/PropertyBreadcrumbsDto'
        portfolioId:
          type: string
        area:
          type: string
          nullable: true
          default: null
          minLength: 1
          maxLength: 255
        block:
          type: string
          nullable: true
          default: null
        avenue:
          type: string
          nullable: true
          default: null
        street:
          type: string
          nullable: true
          default: null
        number:
          type: string
          nullable: true
          default: null
        parcel:
          type: string
          nullable: true
          default: null
        paci:
          type: string
          nullable: true
          default: null
        cost:
          type: number
          nullable: true
          default: null
      required:
        - id
        - createdAt
        - updatedAt
        - breadcrumbs
        - portfolioId
        - area
        - block
        - avenue
        - street
        - number
        - parcel
        - paci
        - cost
    UnitBreadcrumbsDto:
      type: object
      properties:
        portfolio:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
        property:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
        unit:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
      required:
        - portfolio
        - property
        - unit
    UnitVacancy:
      type: object
      properties:
        isVacant:
          type: boolean
        vacancyDistance:
          type: string
          nullable: true
        vacancyDate:
          format: date-time
          type: string
          nullable: true
      required:
        - isVacant
        - vacancyDistance
        - vacancyDate
    HateoasDto:
      type: object
      properties:
        href:
          type: string
        mediaType:
          type: string
      required:
        - href
    UnitDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        breadcrumbs:
          $ref: '#/components/schemas/UnitBreadcrumbsDto'
        vacancy:
          $ref: '#/components/schemas/UnitVacancy'
        hateoas:
          $ref: '#/components/schemas/HateoasDto'
        propertyId:
          type: string
        unitNumber:
          type: string
          minLength: 1
          maxLength: 255
        floor:
          type: number
          nullable: true
          default: null
        size:
          type: number
          nullable: true
          default: null
          minimum: 1
        bed:
          type: number
          nullable: true
          default: null
          minimum: 1
        bath:
          type: number
          nullable: true
          default: null
          minimum: 1
        marketRent:
          type: number
          nullable: true
          default: null
          minimum: 1
        type:
          type: string
          nullable: true
          default: null
        usage:
          type: string
          nullable: true
          default: null
      required:
        - id
        - createdAt
        - updatedAt
        - breadcrumbs
        - vacancy
        - hateoas
        - propertyId
        - unitNumber
        - floor
        - size
        - bed
        - bath
        - marketRent
        - type
        - usage
    CreatePropertyDto:
      type: object
      properties:
        portfolioId:
          type: string
        area:
          type: string
          nullable: true
          default: null
          minLength: 1
          maxLength: 255
        block:
          type: string
          nullable: true
          default: null
        avenue:
          type: string
          nullable: true
          default: null
        street:
          type: string
          nullable: true
          default: null
        number:
          type: string
          nullable: true
          default: null
        parcel:
          type: string
          nullable: true
          default: null
        paci:
          type: string
          nullable: true
          default: null
        cost:
          type: number
          nullable: true
          default: null
      required:
        - portfolioId
        - area
    UpdatePropertyDto:
      type: object
      properties:
        area:
          type: string
          nullable: true
          default: null
          minLength: 1
          maxLength: 255
        block:
          type: string
          nullable: true
          default: null
        avenue:
          type: string
          nullable: true
          default: null
        street:
          type: string
          nullable: true
          default: null
        number:
          type: string
          nullable: true
          default: null
        parcel:
          type: string
          nullable: true
          default: null
        paci:
          type: string
          nullable: true
          default: null
        cost:
          type: number
          nullable: true
          default: null
    CreateUnitDto:
      type: object
      properties:
        propertyId:
          type: string
        unitNumber:
          type: string
          minLength: 1
          maxLength: 255
        floor:
          type: number
          nullable: true
          default: null
        size:
          type: number
          nullable: true
          default: null
          minimum: 1
        bed:
          type: number
          nullable: true
          default: null
          minimum: 1
        bath:
          type: number
          nullable: true
          default: null
          minimum: 1
        marketRent:
          type: number
          nullable: true
          default: null
          minimum: 1
        type:
          type: string
          nullable: true
          default: null
        usage:
          type: string
          nullable: true
          default: null
      required:
        - propertyId
        - unitNumber
    UpdateUnitDto:
      type: object
      properties:
        unitNumber:
          type: string
          minLength: 1
          maxLength: 255
        floor:
          type: number
          nullable: true
          default: null
        size:
          type: number
          nullable: true
          default: null
          minimum: 1
        bed:
          type: number
          nullable: true
          default: null
          minimum: 1
        bath:
          type: number
          nullable: true
          default: null
          minimum: 1
        marketRent:
          type: number
          nullable: true
          default: null
          minimum: 1
        type:
          type: string
          nullable: true
          default: null
        usage:
          type: string
          nullable: true
          default: null
    ValidatedUserDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        fullName:
          type: string
          nullable: true
          default: null
        roles:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/RoleDto'
              - type: object
                required:
                  - organization
                properties:
                  organization:
                    type: object
                    required:
                      - id
                      - fullName
                    properties:
                      id:
                        type: string
                      fullName:
                        type: string
        email:
          type: string
      required:
        - id
        - createdAt
        - updatedAt
        - roles
        - email
    CreateExpenseDto:
      type: object
      properties:
        portfolioId:
          type: string
        amount:
          type: number
          minimum: 1
        postAt:
          format: date-time
          type: string
        memo:
          type: string
          nullable: true
        unitId:
          type: string
          nullable: true
        propertyId:
          type: string
          nullable: true
        categoryId:
          type: number
          nullable: true
      required:
        - portfolioId
        - amount
        - postAt
        - memo
    ExpenseBreadcrumbsDto:
      type: object
      properties:
        portfolio:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
        property:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
        unit:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
      required:
        - portfolio
    ExpenseCategoryDto:
      type: object
      properties:
        id:
          type: number
          minimum: 1
        labelEn:
          type: string
        parentId:
          type: number
          nullable: true
          default: null
          minimum: 1
        labelAr:
          type: string
          default: ''
        description:
          type: string
          nullable: true
          default: null
      required:
        - id
        - labelEn
    ExpenseDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        breadcrumbs:
          $ref: '#/components/schemas/ExpenseBreadcrumbsDto'
        expenseType:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/ExpenseCategoryDto'
        portfolioId:
          type: string
        amount:
          type: number
          minimum: 1
        postAt:
          format: date-time
          type: string
        memo:
          type: string
          nullable: true
        unitId:
          type: string
          nullable: true
        propertyId:
          type: string
          nullable: true
        categoryId:
          type: number
          nullable: true
      required:
        - id
        - createdAt
        - updatedAt
        - breadcrumbs
        - expenseType
        - portfolioId
        - amount
        - postAt
        - memo
        - categoryId
    UpdateExpenseDto:
      type: object
      properties:
        amount:
          type: number
          minimum: 1
        postAt:
          format: date-time
          type: string
        memo:
          type: string
          nullable: true
        unitId:
          type: string
          nullable: true
        propertyId:
          type: string
          nullable: true
        categoryId:
          type: number
          nullable: true
    CreateOrganizationDto:
      type: object
      properties:
        fullName:
          type: string
          minLength: 1
          maxLength: 255
        label:
          type: string
          nullable: true
          default: null
      required:
        - fullName
    OrganizationDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        fullName:
          type: string
          minLength: 1
          maxLength: 255
        label:
          type: string
          nullable: true
          default: null
      required:
        - id
        - createdAt
        - updatedAt
        - fullName
        - label
    OrganizationCreatedDto:
      type: object
      properties:
        organization:
          $ref: '#/components/schemas/OrganizationDto'
        roleId:
          type: string
      required:
        - organization
        - roleId
    OrganizationSettingsDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          format: date-time
          type: string
          readOnly: true
        updatedAt:
          format: date-time
          type: string
          readOnly: true
        expenseCategoryTree:
          type: object
        organizationId:
          type: string
      required:
        - id
        - createdAt
        - updatedAt
        - expenseCategoryTree
        - organizationId
    UpdateExpenseCategoryDto:
      type: object
      properties:
        id:
          type: number
          minimum: 1
        labelEn:
          type: string
        parentId:
          type: number
          nullable: true
          default: null
          minimum: 1
        labelAr:
          type: string
          default: ''
        description:
          type: string
          nullable: true
          default: null
    UpdateOrganizationSettingsDto:
      type: object
      properties:
        expenseCategoryTree:
          $ref: '#/components/schemas/UpdateExpenseCategoryDto'
      required:
        - expenseCategoryTree
    ByMonthDto:
      type: object
      properties:
        amount:
          type: number
        date:
          type: string
      required:
        - amount
        - date
    BreadcrumbsDto:
      type: object
      properties:
        portfolio:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
        property:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
        unit:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
        lease:
          readOnly: true
          allOf:
            - $ref: '#/components/schemas/BreadcrumbDto'
        tenant:
          $ref: '#/components/schemas/BreadcrumbDto'
      required:
        - portfolio
        - property
        - unit
        - lease
        - tenant
    PaginatedDto:
      type: object
      properties:
        page:
          type: number
        take:
          type: number
        itemCount:
          type: number
          description: Total number of items in the collection
        pageCount:
          type: number
        hasPreviousPage:
          type: boolean
        hasNextPage:
          type: boolean
        pageSize:
          type: number
        start:
          type: number
        end:
          type: number
      required:
        - page
        - take
        - itemCount
        - pageCount
        - hasPreviousPage
        - hasNextPage
        - pageSize
        - start
        - end
    PaginatedMetaDto:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/PaginatedDto'
      required:
        - pagination
security:
  - oauth-swagger: []
