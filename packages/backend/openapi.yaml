openapi: 3.0.0
paths:
  /tenants:
    get:
      operationId: TenantsController_findAll
      summary: ''
      description: ''
      parameters:
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedTenantDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfTenantDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/TenantDto'
      tags: &ref_0
        - tenants
      security: &ref_1
        - accessToken: []
  /tenants/{id}:
    get:
      operationId: TenantsController_findOne
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantDto'
      tags: *ref_0
      security: *ref_1
    patch:
      operationId: TenantsController_update
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTenantDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantDto'
      tags: *ref_0
      security: *ref_1
    delete:
      operationId: TenantsController_remove
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: *ref_0
      security: *ref_1
  /tenants/{id}/leases:
    get:
      operationId: TenantsController_findLeases
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedLeaseDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfLeaseDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/LeaseDto'
      tags: *ref_0
      security: *ref_1
  /tenants/{id}/leaseInvoices:
    get:
      operationId: TenantsController_findInvoices
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedLeaseInvoiceDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfLeaseInvoiceDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/LeaseInvoiceDto'
      tags: *ref_0
      security: *ref_1
  /tenants/{id}/roles:
    get:
      operationId: TenantsController_findRoles
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedRoleDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfRoleDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/RoleDto'
      tags: *ref_0
      security: *ref_1
  /organizations/{organizationId}/roles:
    post:
      operationId: RolesController_createOrgAdminRole
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDto'
      tags: &ref_2
        - roles
  /organizations/{organizationId}/portfolios/{portfolioId}/roles:
    post:
      operationId: RolesController_createPortfolioRole
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
        - name: portfolioId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDto'
      tags: *ref_2
  /organizations/{organizationId}/tenants/{tenantId}/roles:
    post:
      operationId: RolesController_createTenantRole
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
        - name: tenantId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleDto'
      tags: *ref_2
  /organizations/{organizationId}/roles/{id}:
    delete:
      operationId: RolesController_remove
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: *ref_2
  /organizations/{organizationId}/roles/{roleId}/send-invite:
    post:
      operationId: RolesController_sendInvite
      summary: ''
      description: ''
      parameters:
        - name: roleId
          required: true
          in: path
          schema:
            type: string
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: *ref_2
  /leaseInvoices/myfatoorah-callback:
    get:
      operationId: LeaseInvoicesController_myfatoorahCallback
      summary: ''
      description: ''
      parameters:
        - name: paymentId
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: &ref_3
        - leaseInvoices
      security: &ref_4
        - accessToken: []
  /leaseInvoices/{id}:
    get:
      operationId: LeaseInvoicesController_findOne
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseInvoiceDto'
      tags: *ref_3
      security: *ref_4
    patch:
      operationId: LeaseInvoicesController_update
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLeaseInvoiceDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartialLeaseInvoiceDto'
      tags: *ref_3
      security: *ref_4
    delete:
      operationId: LeaseInvoicesController_remove
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: *ref_3
      security: *ref_4
  /leaseInvoices/{id}/pay:
    get:
      operationId: LeaseInvoicesController_payInvoice
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_3
      security: *ref_4
  /leaseInvoices/{id}/messages:
    get:
      operationId: LeaseInvoicesController_findMessages
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageDto'
      tags: *ref_3
      security: *ref_4
  /leases:
    get:
      operationId: LeasesController_findAll
      summary: ''
      description: ''
      parameters:
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedLeaseDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfLeaseDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/LeaseDto'
      tags: &ref_5
        - leases
      security: &ref_6
        - accessToken: []
  /leases/{id}:
    get:
      operationId: LeasesController_findOne
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LeaseDto'
      tags: *ref_5
      security: *ref_6
    patch:
      operationId: LeasesController_update
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLeaseDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartialLeaseDto'
      tags: *ref_5
      security: *ref_6
    delete:
      operationId: LeasesController_remove
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: *ref_5
      security: *ref_6
  /leases/{id}/leaseInvoices:
    get:
      operationId: LeasesController_findInvoices
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedLeaseInvoiceDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfLeaseInvoiceDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/LeaseInvoiceDto'
      tags: *ref_5
      security: *ref_6
  /portfolios:
    get:
      operationId: PortfoliosController_findAll
      summary: ''
      description: ''
      parameters:
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedPortfolioDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfPortfolioDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/PortfolioDto'
      tags: &ref_7
        - portfolios
      security: &ref_8
        - accessToken: []
  /portfolios/{id}:
    get:
      operationId: PortfoliosController_findOne
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioDto'
      tags: *ref_7
      security: *ref_8
    patch:
      operationId: PortfoliosController_update
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePortfolioDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioDto'
      tags: *ref_7
      security: *ref_8
    delete:
      operationId: PortfoliosController_remove
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioDto'
      tags: *ref_7
      security: *ref_8
  /portfolios/{id}/roles:
    get:
      operationId: PortfoliosController_findRoles
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedRoleDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfRoleDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/RoleDto'
      tags: *ref_7
      security: *ref_8
  /portfolios/{id}/properties:
    get:
      operationId: PortfoliosController_findProperties
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedPropertyDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfPropertyDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/PropertyDto'
      tags: *ref_7
      security: *ref_8
  /portfolios/{id}/units:
    get:
      operationId: PortfoliosController_findUnits
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedUnitDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfUnitDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnitDto'
      tags: *ref_7
      security: *ref_8
  /portfolios/{id}/units-minimal:
    get:
      operationId: PortfoliosController_findUnitsMinimal
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedUnitMinimalDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfUnitMinimalDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/UnitMinimalDto'
      tags: *ref_7
      security: *ref_8
  /portfolios/{id}/payouts:
    get:
      operationId: PortfoliosController_findPayouts
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedPayoutDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfPayoutDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/PayoutDto'
      tags: *ref_7
      security: *ref_8
  /portfolios/{id}/balance:
    get:
      operationId: PortfoliosController_getBalance
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceDto'
      tags: *ref_7
      security: *ref_8
  /portfolios/{id}/leaseInvoices:
    get:
      operationId: PortfoliosController_findAllLeaseInvoices
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedLeaseInvoiceDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfLeaseInvoiceDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/LeaseInvoiceDto'
      tags: *ref_7
      security: *ref_8
  /portfolios/{id}/expenses:
    get:
      operationId: PortfoliosController_findAllExpenses
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
        - required: false
          name: propertyId
          in: query
          schema:
            nullable: true
            type: string
        - required: false
          name: unitId
          in: query
          schema:
            nullable: true
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedExpenseDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfExpenseDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/ExpenseDto'
      tags: *ref_7
      security: *ref_8
  /organizations/{organizationId}/portfolios/{portfolioId}/aggregate/income:
    get:
      operationId: PortfolioAggregateController_getIncomeByMonth
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
        - name: portfolioId
          required: true
          in: path
          schema:
            type: string
        - name: start
          required: false
          in: query
          schema:
            type: string
        - name: end
          required: false
          in: query
          schema:
            type: string
        - name: propertyId
          required: false
          in: query
          schema:
            type: string
        - name: unitId
          required: false
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomeByMonthDto'
      tags: &ref_9
        - portfolios
      security: &ref_10
        - accessToken: []
  /organizations/{organizationId}/portfolios/{portfolioId}/aggregate/expenses:
    get:
      operationId: PortfolioAggregateController_getExpensesByMonth
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
        - name: portfolioId
          required: true
          in: path
          schema:
            type: string
        - name: start
          required: false
          in: query
          schema:
            type: string
        - name: end
          required: false
          in: query
          schema:
            type: string
        - name: propertyId
          required: false
          in: query
          schema:
            nullable: true
            type: string
        - name: unitId
          required: false
          in: query
          schema:
            nullable: true
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupByMonthDto'
      tags: *ref_9
      security: *ref_10
  /organizations/{organizationId}/portfolios/{portfolioId}/aggregate/expenses-by-category:
    get:
      operationId: PortfolioAggregateController_getExpensesByCategory
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
        - name: portfolioId
          required: true
          in: path
          schema:
            type: string
        - name: start
          required: false
          in: query
          schema:
            type: string
        - name: end
          required: false
          in: query
          schema:
            type: string
        - name: propertyId
          required: false
          in: query
          schema:
            nullable: true
            type: string
        - name: unitId
          required: false
          in: query
          schema:
            nullable: true
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupByCategoryDto'
      tags: *ref_9
      security: *ref_10
  /organizations/{organizationId}/portfolios/{portfolioId}/aggregate/expenses-by-location:
    get:
      operationId: PortfolioAggregateController_getExpensesByLocation
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
        - name: portfolioId
          required: true
          in: path
          schema:
            type: string
        - name: start
          required: false
          in: query
          schema:
            type: string
        - name: end
          required: false
          in: query
          schema:
            type: string
        - name: propertyId
          required: false
          in: query
          schema:
            nullable: true
            type: string
        - name: unitId
          required: false
          in: query
          schema:
            nullable: true
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroupByLocationDto'
      tags: *ref_9
      security: *ref_10
  /organizations/{organizationId}/portfolios/{portfolioId}/aggregate/occupancy:
    get:
      operationId: PortfolioAggregateController_getOccupancy
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
        - name: portfolioId
          required: true
          in: path
          schema:
            type: string
        - name: start
          required: false
          in: query
          schema:
            type: string
        - name: end
          required: false
          in: query
          schema:
            type: string
        - name: propertyId
          required: false
          in: query
          schema:
            type: string
        - name: unitId
          required: false
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Occupancy'
      tags: *ref_9
      security: *ref_10
  /properties:
    get:
      operationId: PropertiesController_findAll
      summary: ''
      description: ''
      parameters:
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedPropertyDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfPropertyDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/PropertyDto'
      tags: &ref_11
        - properties
      security: &ref_12
        - accessToken: []
  /properties/{id}:
    get:
      operationId: PropertiesController_findOne
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyDto'
      tags: *ref_11
      security: *ref_12
    patch:
      operationId: PropertiesController_update
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePropertyDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyBasicDto'
      tags: *ref_11
      security: *ref_12
    delete:
      operationId: PropertiesController_remove
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: *ref_11
      security: *ref_12
  /units/{id}:
    get:
      operationId: UnitsController_findOne
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnitDto'
      tags: &ref_13
        - units
      security: &ref_14
        - accessToken: []
    patch:
      operationId: UnitsController_update
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUnitDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartialUnitDto'
      tags: *ref_13
      security: *ref_14
    delete:
      operationId: UnitsController_remove
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: *ref_13
      security: *ref_14
  /units/{id}/leases:
    get:
      operationId: UnitsController_findLeases
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedLeaseDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfLeaseDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/LeaseDto'
      tags: *ref_13
      security: *ref_14
  /payouts:
    get:
      operationId: PayoutsController_findAll
      summary: ''
      description: ''
      parameters:
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedPayoutDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfPayoutDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/PayoutDto'
      tags: &ref_15
        - payouts
      security: &ref_16
        - accessToken: []
  /payouts/{id}:
    get:
      operationId: PayoutsController_findOne
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutDto'
      tags: *ref_15
      security: *ref_16
    delete:
      operationId: PayoutsController_remove
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: *ref_15
      security: *ref_16
  /expenses/{id}:
    get:
      operationId: ExpensesController_findOne
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseDto'
      tags: &ref_17
        - expenses
      security: &ref_18
        - accessToken: []
    patch:
      operationId: ExpensesController_update
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateExpenseDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartialExpenseDto'
      tags: *ref_17
      security: *ref_18
    delete:
      operationId: ExpensesController_remove
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: *ref_17
      security: *ref_18
  /users/me:
    get:
      operationId: UsersController_findProfile
      summary: ''
      description: ''
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidatedUserDto'
        '404':
          description: ''
      tags:
        - users
      security:
        - accessToken: []
  /organizations:
    post:
      operationId: OrganizationsController_create
      summary: ''
      description: ''
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationCreatedDto'
      tags: &ref_19
        - organizations
      security: &ref_20
        - accessToken: []
  /organizations/{id}:
    get:
      operationId: OrganizationsController_findOne
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDto'
      tags: *ref_19
      security: *ref_20
    patch:
      operationId: OrganizationsController_update
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDto'
      tags: *ref_19
      security: *ref_20
    delete:
      operationId: OrganizationsController_remove
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDto'
      tags: *ref_19
      security: *ref_20
  /organizations/{id}/roles:
    get:
      operationId: OrganizationsController_findRoles
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedRoleDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfRoleDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/RoleDto'
      tags: *ref_19
      security: *ref_20
  /organizations/{organizationId}/search:
    get:
      operationId: OrganizationsController_search
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
        - name: query
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchDto'
      tags: *ref_19
      security: *ref_20
  /organizations/{id}/leaseInvoices:
    get:
      operationId: OrganizationsController_findAllLeaseInvoices
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedLeaseInvoiceDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfLeaseInvoiceDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/LeaseInvoiceDto'
      tags: *ref_19
      security: *ref_20
  /organizations/{id}/status-refresh:
    post:
      operationId: OrganizationsController_statusRefresh
      summary: ''
      description: Trigger a refresh of the subscription status of an organization.
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
      tags: *ref_19
      security: *ref_20
  /organizations/{organizationId}/tenants:
    post:
      operationId: OrganizationsAdminController_createTenant
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTenantDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantDto'
      tags: &ref_21
        - organizations
      security: &ref_22
        - accessToken: []
  /organizations/{organizationId}/portfolios:
    post:
      operationId: OrganizationsAdminController_createPortfolio
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePortfolioDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioDto'
      tags: *ref_21
      security: *ref_22
  /organizations/{organizationId}/properties:
    post:
      operationId: OrganizationsAdminController_createProperty
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePropertyDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyBasicDto'
      tags: *ref_21
      security: *ref_22
  /organizations/{organizationId}/units:
    post:
      operationId: OrganizationsAdminController_createUnit
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUnitDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartialUnitDto'
      tags: *ref_21
      security: *ref_22
  /organizations/{organizationId}/leases:
    post:
      operationId: OrganizationsAdminController_createLease
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLeaseDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartialLeaseDto'
      tags: *ref_21
      security: *ref_22
  /organizations/{organizationId}/leaseInvoices:
    post:
      operationId: OrganizationsAdminController_createLeaseInvoice
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLeaseInvoiceDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartialLeaseInvoiceDto'
      tags: *ref_21
      security: *ref_22
  /organizations/{organizationId}/lease/{id}/leaseInvoices:
    post:
      operationId: OrganizationsAdminController_createInvoices
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateManyLeaseInvoicesDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: *ref_21
      security: *ref_22
  /organizations/{organizationId}/expenses:
    post:
      operationId: OrganizationsAdminController_createExpense
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExpenseDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartialExpenseDto'
      tags: *ref_21
      security: *ref_22
  /organizations/{organizationId}/payouts:
    post:
      operationId: OrganizationsAdminController_createPayout
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePayoutDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutDto'
      tags: *ref_21
      security: *ref_22
  /organizations/{organizationId}/leaseInvoices/{id}/send-invoice-email:
    post:
      operationId: OrganizationsAdminController_sendInvoiceEmail
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      tags: *ref_21
      security: *ref_22
  /organizations/{organizationId}/files:
    post:
      operationId: FilesController_create
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateFileDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: &ref_23
        - files
      security: &ref_24
        - accessToken: []
    get:
      operationId: FilesController_findAll
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
        - name: relationKey
          required: true
          in: query
          schema:
            $ref: '#/components/schemas/FileRelationKeyEnum'
        - name: relationValue
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedFileDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfFileDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/FileDto'
      tags: *ref_23
      security: *ref_24
    delete:
      operationId: FilesController_remove
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: *ref_23
      security: *ref_24
  /organizations/{organizationId}/files/find-one:
    get:
      operationId: FilesController_findOne
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
      tags: *ref_23
      security: *ref_24
  /organizations/{organizationId}/expense-categories:
    post:
      operationId: ExpenseCategoriesController_create
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExpenseCategoryDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseCategoryDto'
      tags: &ref_25
        - expense-categories
      security: &ref_26
        - accessToken: []
    get:
      operationId: ExpenseCategoriesController_findAll
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseCategoryDto'
      tags: *ref_25
      security: *ref_26
    patch:
      operationId: ExpenseCategoriesController_updateAll
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateExpenseCategoryTreeDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpenseCategoryDto'
      tags: *ref_25
      security: *ref_26
  /organizations/{organizationId}/expense-categories/{id}:
    patch:
      operationId: ExpenseCategoriesController_update
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateExpenseCategoryDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseCategoryDto'
      tags: *ref_25
      security: *ref_26
  /organizations/{organizationId}/maintenance-orders:
    post:
      operationId: MaintenanceOrdersController_create
      summary: ''
      description: ''
      parameters:
        - name: organizationId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMaintenanceOrderDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceOrderDto'
      tags: &ref_27
        - maintenance-orders
  /:
    get:
      operationId: MaintenanceOrdersController_findAll
      summary: ''
      description: ''
      parameters:
        - required: false
          name: page
          in: query
          schema:
            type: number
        - required: false
          name: skip
          in: query
          schema:
            type: number
        - required: false
          name: take
          in: query
          schema:
            type: number
        - required: false
          name: sort
          in: query
          schema:
            type: array
            items:
              type: string
        - required: false
          name: filter
          in: query
          schema:
            type: object
        - required: false
          description: |-
            For arbitrary filters that are not part of the schema.
            Ex. `filterCustom: { isPaidLate: true }`
          name: filterCustom
          in: query
          schema:
            type: object
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                title: PaginatedMaintenanceOrderDto
                required:
                  - results
                allOf:
                  - $ref: '#/components/schemas/PaginatedMetaDto'
                  - title: ArrayOfMaintenanceOrderDto
                    properties:
                      results:
                        type: array
                        items:
                          $ref: '#/components/schemas/MaintenanceOrderDto'
      tags: *ref_27
  /maintenance-orders/{id}:
    get:
      operationId: MaintenanceOrdersController_findOne
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceOrderDto'
      tags: *ref_27
    patch:
      operationId: MaintenanceOrdersController_update
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMaintenanceOrderDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceOrderDto'
      tags: *ref_27
    delete:
      operationId: MaintenanceOrdersController_remove
      summary: ''
      description: ''
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags: *ref_27
info:
  title: Aqaratech
  description: Aqaratech API
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    cookie:
      type: apiKey
      in: cookie
      name: accessToken
  schemas:
    TenantDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        fullName:
          type: string
        label:
          type: string
          nullable: true
        civilid:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        dob:
          format: date-time
          type: string
          nullable: true
        nationality:
          type: string
          nullable: true
        passportNum:
          type: string
          nullable: true
        residencyEnd:
          format: date-time
          type: string
          nullable: true
        residencyNum:
          type: string
          nullable: true
        organizationId:
          type: string
        title:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - fullName
        - label
        - civilid
        - phone
        - dob
        - nationality
        - passportNum
        - residencyEnd
        - residencyNum
        - organizationId
        - title
        - createdAt
        - updatedAt
    UpdateTenantDto:
      type: object
      properties:
        fullName:
          type: string
        label:
          type: string
          nullable: true
        civilid:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        dob:
          type: string
          nullable: true
        nationality:
          type: string
          nullable: true
        passportNum:
          type: string
          nullable: true
        residencyEnd:
          type: string
          nullable: true
        residencyNum:
          type: string
          nullable: true
    BreadcrumbDto:
      type: object
      properties:
        id:
          type: string
        label:
          type: string
      required:
        - id
        - label
    LeaseBreadcrumbsDto:
      type: object
      properties:
        tenant:
          $ref: '#/components/schemas/BreadcrumbDto'
        portfolio:
          $ref: '#/components/schemas/BreadcrumbDto'
        property:
          $ref: '#/components/schemas/BreadcrumbDto'
        unit:
          $ref: '#/components/schemas/BreadcrumbDto'
      required:
        - tenant
        - portfolio
        - property
        - unit
    LeaseDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        breadcrumbs:
          $ref: '#/components/schemas/LeaseBreadcrumbsDto'
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        organizationId:
          type: string
        portfolioId:
          type: string
        tenantId:
          type: string
        unitId:
          type: string
        start:
          format: date-time
          type: string
        end:
          format: date-time
          type: string
        monthlyRent:
          type: number
        deposit:
          type: number
        canPay:
          type: boolean
        notify:
          type: boolean
        license:
          type: string
          nullable: true
      required:
        - id
        - breadcrumbs
        - createdAt
        - updatedAt
        - organizationId
        - portfolioId
        - tenantId
        - unitId
        - start
        - end
        - monthlyRent
        - deposit
        - canPay
        - notify
        - license
    LeaseInvoiceBreadcrumbsDto:
      type: object
      properties:
        tenant:
          $ref: '#/components/schemas/BreadcrumbDto'
        portfolio:
          $ref: '#/components/schemas/BreadcrumbDto'
        property:
          $ref: '#/components/schemas/BreadcrumbDto'
        unit:
          $ref: '#/components/schemas/BreadcrumbDto'
        lease:
          $ref: '#/components/schemas/BreadcrumbDto'
      required:
        - tenant
        - portfolio
        - property
        - unit
        - lease
    LeaseInvoiceDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        breadcrumbs:
          $ref: '#/components/schemas/LeaseInvoiceBreadcrumbsDto'
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        organizationId:
          type: string
        portfolioId:
          type: string
        amount:
          type: number
        postAt:
          format: date-time
          type: string
        leaseId:
          type: string
        dueAt:
          format: date-time
          type: string
          nullable: true
        paidAt:
          format: date-time
          type: string
          nullable: true
        isPaid:
          type: boolean
        memo:
          type: string
          nullable: true
        mfPaymentId:
          type: string
          nullable: true
      required:
        - id
        - breadcrumbs
        - createdAt
        - updatedAt
        - organizationId
        - portfolioId
        - amount
        - postAt
        - leaseId
        - dueAt
        - paidAt
        - isPaid
        - memo
        - mfPaymentId
    RoleTypeEnum:
      type: string
      enum:
        - ORGADMIN
        - PORTFOLIO
        - TENANT
    RoleDto:
      type: object
      properties:
        roleType:
          $ref: '#/components/schemas/RoleTypeEnum'
        id:
          type: string
        createdAt:
          format: date-time
          type: string
        email:
          type: string
        organizationId:
          type: string
        portfolioId:
          type: string
          nullable: true
        tenantId:
          type: string
          nullable: true
      required:
        - roleType
        - id
        - createdAt
        - email
        - organizationId
        - portfolioId
        - tenantId
    CreateRoleDto:
      type: object
      properties:
        email:
          type: string
      required:
        - email
    UpdateLeaseInvoiceDto:
      type: object
      properties:
        amount:
          type: number
        isPaid:
          type: boolean
        postAt:
          type: string
        paidAt:
          type: string
          nullable: true
        memo:
          type: string
          nullable: true
    PartialLeaseInvoiceDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        breadcrumbs:
          $ref: '#/components/schemas/LeaseInvoiceBreadcrumbsDto'
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        organizationId:
          type: string
        portfolioId:
          type: string
        amount:
          type: number
        postAt:
          format: date-time
          type: string
        leaseId:
          type: string
        dueAt:
          format: date-time
          type: string
          nullable: true
        paidAt:
          format: date-time
          type: string
          nullable: true
        isPaid:
          type: boolean
        memo:
          type: string
          nullable: true
        mfPaymentId:
          type: string
          nullable: true
    MessageDto:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        recipients:
          type: array
          items:
            type: string
        receivedAt:
          type: string
      required:
        - id
        - status
        - recipients
        - receivedAt
    UpdateLeaseDto:
      type: object
      properties:
        start:
          type: string
        monthlyRent:
          type: number
        deposit:
          type: number
        end:
          type: string
        notify:
          type: boolean
        canPay:
          type: boolean
        license:
          type: string
          nullable: true
    PartialLeaseDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        breadcrumbs:
          $ref: '#/components/schemas/LeaseBreadcrumbsDto'
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        organizationId:
          type: string
        portfolioId:
          type: string
        tenantId:
          type: string
        unitId:
          type: string
        start:
          format: date-time
          type: string
        end:
          format: date-time
          type: string
        monthlyRent:
          type: number
        deposit:
          type: number
        canPay:
          type: boolean
        notify:
          type: boolean
        license:
          type: string
          nullable: true
    PortfolioDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        fullName:
          type: string
        label:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        civilid:
          type: string
          nullable: true
        dob:
          format: date-time
          type: string
          nullable: true
        organizationId:
          type: string
        title:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - fullName
        - label
        - phone
        - civilid
        - dob
        - organizationId
        - title
        - createdAt
        - updatedAt
    UpdatePortfolioDto:
      type: object
      properties:
        fullName:
          type: string
        label:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        civilid:
          type: string
          nullable: true
        dob:
          type: string
          nullable: true
    PropertyBreadcrumbsDto:
      type: object
      properties:
        portfolio:
          $ref: '#/components/schemas/BreadcrumbDto'
        property:
          $ref: '#/components/schemas/BreadcrumbDto'
      required:
        - portfolio
        - property
    PropertyDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        breadcrumbs:
          $ref: '#/components/schemas/PropertyBreadcrumbsDto'
        title:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        organizationId:
          type: string
        portfolioId:
          type: string
        area:
          type: string
          nullable: true
        block:
          type: string
          nullable: true
        avenue:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        parcel:
          type: string
          nullable: true
        paci:
          type: string
          nullable: true
        cost:
          type: number
          nullable: true
        label:
          type: string
          nullable: true
      required:
        - id
        - breadcrumbs
        - title
        - createdAt
        - updatedAt
        - organizationId
        - portfolioId
        - area
        - block
        - avenue
        - street
        - number
        - parcel
        - paci
        - cost
        - label
    UnitVacancy:
      type: object
      properties:
        isVacant:
          type: boolean
        vacancyDistance:
          type: string
        vacancyDate:
          format: date-time
          type: string
      required:
        - isVacant
        - vacancyDistance
        - vacancyDate
    UnitBreadcrumbsDto:
      type: object
      properties:
        portfolio:
          $ref: '#/components/schemas/BreadcrumbDto'
        property:
          $ref: '#/components/schemas/BreadcrumbDto'
        unit:
          $ref: '#/components/schemas/BreadcrumbDto'
      required:
        - portfolio
        - property
        - unit
    UnitDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        vacancy:
          $ref: '#/components/schemas/UnitVacancy'
        breadcrumbs:
          $ref: '#/components/schemas/UnitBreadcrumbsDto'
        title:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        organizationId:
          type: string
        portfolioId:
          type: string
        propertyId:
          type: string
        unitNumber:
          type: string
        floor:
          type: number
          nullable: true
        size:
          type: number
          nullable: true
        bed:
          type: number
          nullable: true
        bath:
          type: number
          nullable: true
        marketRent:
          type: number
          nullable: true
        type:
          type: string
          nullable: true
        usage:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
      required:
        - id
        - vacancy
        - breadcrumbs
        - title
        - createdAt
        - updatedAt
        - organizationId
        - portfolioId
        - propertyId
        - unitNumber
        - floor
        - size
        - bed
        - bath
        - marketRent
        - type
        - usage
        - label
    UnitMinimalDto:
      type: object
      properties:
        id:
          type: string
        unitNumber:
          type: string
        propertyId:
          type: string
        type:
          type: string
          nullable: true
      required:
        - id
        - unitNumber
        - propertyId
        - type
    PayoutBreadcrumbsDto:
      type: object
      properties:
        portfolio:
          $ref: '#/components/schemas/BreadcrumbDto'
      required:
        - portfolio
    PayoutDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        breadcrumbs:
          $ref: '#/components/schemas/PayoutBreadcrumbsDto'
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        organizationId:
          type: string
        portfolioId:
          type: string
        amount:
          type: number
        postAt:
          format: date-time
          type: string
        memo:
          type: string
          nullable: true
      required:
        - id
        - breadcrumbs
        - createdAt
        - updatedAt
        - organizationId
        - portfolioId
        - amount
        - postAt
    BalanceDto:
      type: object
      properties:
        expenses:
          type: number
        leaseInvoices:
          type: number
        payouts:
          type: number
        total:
          type: number
      required:
        - expenses
        - leaseInvoices
        - payouts
        - total
    ExpenseCategoryDto:
      type: object
      properties:
        id:
          type: string
        labelEn:
          type: string
        labelAr:
          type: string
          nullable: true
        parentId:
          type: string
          nullable: true
        isGroup:
          type: boolean
      required:
        - id
        - labelEn
        - labelAr
        - parentId
        - isGroup
    ExpenseBreadcrumbsDto:
      type: object
      properties:
        portfolio:
          $ref: '#/components/schemas/BreadcrumbDto'
        property:
          $ref: '#/components/schemas/BreadcrumbDto'
        unit:
          $ref: '#/components/schemas/BreadcrumbDto'
      required:
        - portfolio
    ExpenseDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        expenseType:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/ExpenseCategoryDto'
        breadcrumbs:
          $ref: '#/components/schemas/ExpenseBreadcrumbsDto'
        portfolioId:
          type: string
        propertyId:
          type: string
          nullable: true
        unitId:
          type: string
          nullable: true
        amount:
          type: number
        postAt:
          type: string
        categoryId:
          type: string
          nullable: true
        memo:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
        organizationId:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - expenseType
        - breadcrumbs
        - portfolioId
        - propertyId
        - unitId
        - amount
        - postAt
        - categoryId
        - memo
        - label
        - organizationId
        - createdAt
        - updatedAt
    GroupByMonthDto:
      type: object
      properties:
        date:
          type: string
        amount:
          type: number
      required:
        - date
        - amount
    IncomeByMonthDto:
      type: object
      properties:
        total:
          type: array
          items:
            $ref: '#/components/schemas/GroupByMonthDto'
        paid:
          type: array
          items:
            $ref: '#/components/schemas/GroupByMonthDto'
        unpaid:
          type: array
          items:
            $ref: '#/components/schemas/GroupByMonthDto'
      required:
        - total
        - paid
        - unpaid
    GroupByCategoryDto:
      type: object
      properties:
        categoryId:
          type: string
        amount:
          type: number
      required:
        - categoryId
        - amount
    GroupByLocationDto:
      type: object
      properties:
        portfolioId:
          type: string
        propertyId:
          type: string
          nullable: true
        unitId:
          type: string
          nullable: true
        propertyTitle:
          type: string
          nullable: true
        unitTitle:
          type: string
          nullable: true
        amount:
          type: number
      required:
        - portfolioId
        - propertyId
        - unitId
        - propertyTitle
        - unitTitle
        - amount
    Occupancy:
      type: object
      properties:
        date:
          type: number
        occupiedPct:
          type: number
      required:
        - date
        - occupiedPct
    UpdatePropertyDto:
      type: object
      properties:
        number:
          type: string
        area:
          type: string
        block:
          type: string
        street:
          type: string
        label:
          type: string
          nullable: true
        avenue:
          type: string
          nullable: true
        parcel:
          type: string
          nullable: true
        paci:
          type: string
          nullable: true
    PropertyBasicDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        title:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        organizationId:
          type: string
        portfolioId:
          type: string
        area:
          type: string
          nullable: true
        block:
          type: string
          nullable: true
        avenue:
          type: string
          nullable: true
        street:
          type: string
          nullable: true
        number:
          type: string
          nullable: true
        parcel:
          type: string
          nullable: true
        paci:
          type: string
          nullable: true
        cost:
          type: number
          nullable: true
        label:
          type: string
          nullable: true
      required:
        - id
        - title
        - createdAt
        - updatedAt
        - organizationId
        - portfolioId
        - area
        - block
        - avenue
        - street
        - number
        - parcel
        - paci
        - cost
        - label
    UpdateUnitDto:
      type: object
      properties:
        unitNumber:
          type: string
        marketRent:
          type: number
          nullable: true
        label:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
        bed:
          type: number
          nullable: true
        bath:
          type: number
          nullable: true
        size:
          type: number
          nullable: true
        floor:
          type: number
          nullable: true
        usage:
          type: string
          nullable: true
    PartialUnitDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        vacancy:
          $ref: '#/components/schemas/UnitVacancy'
        breadcrumbs:
          $ref: '#/components/schemas/UnitBreadcrumbsDto'
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        organizationId:
          type: string
        portfolioId:
          type: string
        propertyId:
          type: string
        unitNumber:
          type: string
        floor:
          type: number
          nullable: true
        size:
          type: number
          nullable: true
        bed:
          type: number
          nullable: true
        bath:
          type: number
          nullable: true
        marketRent:
          type: number
          nullable: true
        type:
          type: string
          nullable: true
        usage:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
        title:
          type: string
    UpdateExpenseDto:
      type: object
      properties:
        amount:
          type: number
        postAt:
          type: string
        categoryId:
          type: string
          nullable: true
        memo:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
    PartialExpenseDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        expenseType:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/ExpenseCategoryDto'
        breadcrumbs:
          $ref: '#/components/schemas/ExpenseBreadcrumbsDto'
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        portfolioId:
          type: string
        propertyId:
          type: string
          nullable: true
        unitId:
          type: string
          nullable: true
        amount:
          type: number
        postAt:
          type: string
        categoryId:
          type: string
          nullable: true
        memo:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
        organizationId:
          type: string
    ValidatedUserDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        roles:
          type: array
          items:
            title: ValidatedRoleDto
            allOf:
              - $ref: '#/components/schemas/RoleDto'
              - type: object
                required:
                  - organization
                properties:
                  organization:
                    type: object
                    required:
                      - id
                      - fullName
                    properties:
                      id:
                        type: string
                      fullName:
                        type: string
                      title:
                        type: string
                      isActive:
                        type: boolean
        email:
          type: string
        fullName:
          type: string
          nullable: true
      required:
        - id
        - roles
        - email
        - fullName
    CreateOrganizationDto:
      type: object
      properties:
        fullName:
          type: string
        label:
          type: string
          nullable: true
      required:
        - fullName
    DueDurationDto:
      type: object
      properties:
        months:
          type: number
        days:
          type: number
      required:
        - months
        - days
    OrganizationSettingsDto:
      type: object
      properties:
        dueDuration:
          $ref: '#/components/schemas/DueDurationDto'
      required:
        - dueDuration
    OrganizationDto:
      type: object
      properties:
        id:
          type: string
        fullName:
          type: string
        label:
          type: string
          nullable: true
        isActive:
          type: boolean
        title:
          type: string
        settings:
          $ref: '#/components/schemas/OrganizationSettingsDto'
      required:
        - id
        - fullName
        - isActive
        - title
    OrganizationCreatedDto:
      type: object
      properties:
        organization:
          $ref: '#/components/schemas/OrganizationDto'
        roleId:
          type: string
      required:
        - organization
        - roleId
    UpdateOrganizationDto:
      type: object
      properties:
        fullName:
          type: string
        label:
          type: string
          nullable: true
        settings:
          $ref: '#/components/schemas/OrganizationSettingsDto'
      required:
        - fullName
    SearchableEntityEnum:
      type: string
      enum:
        - tenant
        - portfolio
        - property
    HitDto:
      type: object
      properties:
        entity:
          $ref: '#/components/schemas/SearchableEntityEnum'
        id:
          type: string
        title:
          type: string
        score:
          type: number
        hints:
          type: object
      required:
        - entity
        - id
        - title
        - score
        - hints
    SearchDto:
      type: object
      properties:
        tenant:
          type: array
          items:
            $ref: '#/components/schemas/HitDto'
        portfolio:
          type: array
          items:
            $ref: '#/components/schemas/HitDto'
        property:
          type: array
          items:
            $ref: '#/components/schemas/HitDto'
      required:
        - tenant
        - portfolio
        - property
    CreateTenantDto:
      type: object
      properties:
        fullName:
          type: string
        label:
          type: string
          nullable: true
        civilid:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        dob:
          type: string
          nullable: true
        nationality:
          type: string
          nullable: true
        passportNum:
          type: string
          nullable: true
        residencyEnd:
          type: string
          nullable: true
        residencyNum:
          type: string
          nullable: true
      required:
        - fullName
    CreatePortfolioDto:
      type: object
      properties:
        fullName:
          type: string
        label:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
        civilid:
          type: string
          nullable: true
        dob:
          type: string
          nullable: true
      required:
        - fullName
    CreatePropertyDto:
      type: object
      properties:
        portfolioId:
          type: string
        number:
          type: string
        area:
          type: string
        block:
          type: string
        street:
          type: string
        label:
          type: string
          nullable: true
        avenue:
          type: string
          nullable: true
        parcel:
          type: string
          nullable: true
        paci:
          type: string
          nullable: true
      required:
        - portfolioId
        - number
        - area
        - block
        - street
    CreateUnitDto:
      type: object
      properties:
        portfolioId:
          type: string
        propertyId:
          type: string
        unitNumber:
          type: string
        marketRent:
          type: number
          nullable: true
        label:
          type: string
          nullable: true
        type:
          type: string
          nullable: true
        bed:
          type: number
          nullable: true
        bath:
          type: number
          nullable: true
        size:
          type: number
          nullable: true
        floor:
          type: number
          nullable: true
        usage:
          type: string
          nullable: true
      required:
        - portfolioId
        - propertyId
        - unitNumber
    CreateLeaseDto:
      type: object
      properties:
        portfolioId:
          type: string
        unitId:
          type: string
        tenantId:
          type: string
        start:
          type: string
        monthlyRent:
          type: number
        deposit:
          type: number
        end:
          type: string
        notify:
          type: boolean
        canPay:
          type: boolean
        license:
          type: string
          nullable: true
      required:
        - portfolioId
        - unitId
        - tenantId
        - start
        - monthlyRent
        - deposit
        - end
        - notify
        - canPay
    CreateLeaseInvoiceDto:
      type: object
      properties:
        portfolioId:
          type: string
        leaseId:
          type: string
        amount:
          type: number
        isPaid:
          type: boolean
        postAt:
          type: string
        paidAt:
          type: string
          nullable: true
        memo:
          type: string
          nullable: true
      required:
        - portfolioId
        - leaseId
        - amount
        - isPaid
        - postAt
    CreateManyLeaseInvoicesDto:
      type: object
      properties:
        portfolioId:
          type: string
        amount:
          type: number
        isPaid:
          type: boolean
        postAt:
          type: string
        paidAt:
          type: string
          nullable: true
        memo:
          type: string
          nullable: true
      required:
        - portfolioId
        - amount
        - isPaid
        - postAt
    CreateExpenseDto:
      type: object
      properties:
        portfolioId:
          type: string
        propertyId:
          type: string
          nullable: true
        unitId:
          type: string
          nullable: true
        amount:
          type: number
        postAt:
          type: string
        categoryId:
          type: string
          nullable: true
        memo:
          type: string
          nullable: true
        label:
          type: string
          nullable: true
      required:
        - portfolioId
        - propertyId
        - unitId
        - amount
        - postAt
    CreatePayoutDto:
      type: object
      properties:
        portfolioId:
          type: string
        amount:
          type: number
        postAt:
          type: string
        memo:
          type: string
          nullable: true
      required:
        - portfolioId
        - amount
        - postAt
    FileRelationKeyEnum:
      type: string
      enum:
        - tenant
        - portfolio
        - property
        - unit
        - expense
        - lease
        - leaseInvoice
        - maintenanceOrder
    CreateFileDto:
      type: object
      properties:
        relationKey:
          $ref: '#/components/schemas/FileRelationKeyEnum'
        file:
          type: string
          format: binary
        fileName:
          type: string
        relationValue:
          type: string
      required:
        - relationKey
        - file
        - fileName
        - relationValue
    FileDto:
      type: object
      properties:
        id:
          type: string
        size:
          type: number
      required:
        - id
        - size
    CreateExpenseCategoryDto:
      type: object
      properties:
        labelEn:
          type: string
        labelAr:
          type: string
          nullable: true
        parentId:
          type: string
          nullable: true
        isGroup:
          type: boolean
      required:
        - labelEn
        - isGroup
    UpdateExpenseCategoryTreeDto:
      type: object
      properties:
        id:
          type: string
        labelEn:
          type: string
        labelAr:
          type: string
          nullable: true
        parentId:
          type: string
          nullable: true
      required:
        - id
        - labelEn
        - labelAr
        - parentId
    UpdateExpenseCategoryDto:
      type: object
      properties:
        labelEn:
          type: string
        labelAr:
          type: string
          nullable: true
        parentId:
          type: string
          nullable: true
      required:
        - labelEn
    MAINTENANCE_ORDER_STATUS_ENUM:
      type: string
      enum:
        - Pending
        - Completed
        - Cancelled
    CreateMaintenanceOrderDto:
      type: object
      properties:
        status:
          nullable: true
          $ref: '#/components/schemas/MAINTENANCE_ORDER_STATUS_ENUM'
        portfolioId:
          type: string
        propertyId:
          type: string
          nullable: true
        unitId:
          type: string
          nullable: true
        tenantId:
          type: string
          nullable: true
        completedAt:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
      required:
        - portfolioId
        - propertyId
        - unitId
        - tenantId
    MaintenanceOrderBreadcrumbsDto:
      type: object
      properties:
        portfolio:
          $ref: '#/components/schemas/BreadcrumbDto'
        property:
          $ref: '#/components/schemas/BreadcrumbDto'
        unit:
          $ref: '#/components/schemas/BreadcrumbDto'
        tenant:
          $ref: '#/components/schemas/BreadcrumbDto'
      required:
        - portfolio
    MaintenanceOrderDto:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        status:
          nullable: true
          $ref: '#/components/schemas/MAINTENANCE_ORDER_STATUS_ENUM'
        breadcrumbs:
          $ref: '#/components/schemas/MaintenanceOrderBreadcrumbsDto'
        portfolioId:
          type: string
        propertyId:
          type: string
          nullable: true
        unitId:
          type: string
          nullable: true
        tenantId:
          type: string
          nullable: true
        completedAt:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        organizationId:
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
        - id
        - status
        - breadcrumbs
        - portfolioId
        - propertyId
        - unitId
        - tenantId
        - completedAt
        - title
        - description
        - organizationId
        - createdAt
        - updatedAt
    UpdateMaintenanceOrderDto:
      type: object
      properties:
        status:
          nullable: true
          $ref: '#/components/schemas/MAINTENANCE_ORDER_STATUS_ENUM'
        completedAt:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
    BreadcrumbsDto:
      type: object
      properties:
        tenant:
          $ref: '#/components/schemas/BreadcrumbDto'
        portfolio:
          $ref: '#/components/schemas/BreadcrumbDto'
        property:
          $ref: '#/components/schemas/BreadcrumbDto'
        unit:
          $ref: '#/components/schemas/BreadcrumbDto'
        lease:
          $ref: '#/components/schemas/BreadcrumbDto'
      required:
        - tenant
        - portfolio
        - property
        - unit
        - lease
    PaginatedDto:
      type: object
      properties:
        page:
          type: number
        take:
          type: number
        itemCount:
          type: number
          description: Total number of items in the collection
        pageCount:
          type: number
        hasPreviousPage:
          type: boolean
        hasNextPage:
          type: boolean
        pageSize:
          type: number
        start:
          type: number
        end:
          type: number
      required:
        - page
        - take
        - itemCount
        - pageCount
        - hasPreviousPage
        - hasNextPage
        - pageSize
        - start
        - end
    PaginatedMetaDto:
      type: object
      properties:
        pagination:
          $ref: '#/components/schemas/PaginatedDto'
      required:
        - pagination
