services:
  site:
    # image: registry.digitalocean.com/aqtech/aqaratech-site:latest
    container_name: site
    build:
      context: ./packages/site
      dockerfile: ./Dockerfile
    ports:
      - '3000:3000'
    env_file: .env
    environment:
      - ORIGIN=http://localhost:3000
      - PUBLIC_API_URL_LOCAL=http://backend:3002

  backend:
    # image: registry.digitalocean.com/aqtech/aqaratech-backend:latest
    container_name: backend
    build:
      context: ./packages/backend
      dockerfile: ./Dockerfile
    ports:
      - '3002:3002'
    env_file: .env
    environment:
      - PUBLIC_API_URL_LOCAL=http://backend:3002
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/aq-db
      - R2_ENDPOINT=http://minio:9000
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy

  postgres:
    image: postgres:14
    container_name: test-postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5434:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d aq-db']
      interval: 2s
      timeout: 5s
      retries: 10

  minio:
    image: quay.io/minio/minio
    container_name: minio
    ports:
      - '9000:9000'
      - '9001:9001'
    command: server --address 0.0.0.0:9000 --console-address ":9001" /data
    volumes:
      - minio_data:/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://127.0.0.1:9000/minio/health/live']
      interval: 2s
      timeout: 5s
      retries: 10

volumes:
  postgres_data:
  minio_data:
  # networks:
  #   aq-network:
  #     driver: bridge
  #     name: aq-network
